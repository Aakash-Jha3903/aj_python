[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "roc_auc_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "roc_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "ConfusionMatrixDisplay",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "pearsonr",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Ridge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "make_regression",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_classification",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "VarianceThreshold",
        "importPath": "sklearn.feature_selection",
        "description": "sklearn.feature_selection",
        "isExtraImport": true,
        "detail": "sklearn.feature_selection",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "AI-ML-Tutorial.different_matrix",
        "description": "AI-ML-Tutorial.different_matrix",
        "peekOfCode": "results = []\nfor name, pred in models.items():\n    mse = mean_squared_error(actual, pred)\n    rmse = np.sqrt(mse)\n    mae = mean_absolute_error(actual, pred)\n    r2 = r2_score(actual, pred)\n    results.append({\n        \"Model\": name,\n        \"R² Score\": round(r2, 3),\n        \"RMSE\": round(rmse, 3),",
        "detail": "AI-ML-Tutorial.different_matrix",
        "documentation": {}
    },
    {
        "label": "df_results",
        "kind": 5,
        "importPath": "AI-ML-Tutorial.different_matrix",
        "description": "AI-ML-Tutorial.different_matrix",
        "peekOfCode": "df_results = pd.DataFrame(results)\nprint(df_results)\nplt.figure(figsize=(10,6))\nplt.plot(actual,\"o-\",label=\"Actual(Y)\", color=\"blue\")\nplt.plot(pred,\"s--\",label=\"Predicted(Y_bar)\", color=\"green\")\nfor i in range(len(actual)):\n    plt.plot([i,i],[actual[i],pred[i]], \"orange\", linestyle=\"--\", linewidth=1)\nplt.title(f\"Mean Absolute Error(MAE) Visualization\\nMAE={mae:.3f}\" )\nplt.xlabel(\"Observation Index\")\nplt.ylabel(\"Value\")",
        "detail": "AI-ML-Tutorial.different_matrix",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Error_bysklearn",
        "description": "AI-ML-Tutorial.Error_bysklearn",
        "peekOfCode": "def mean(A):\n    n=len(A)\n    A_mean=sum(A)/n\n    return A_mean\n# R square\n# def SS_res(Y,Y_bar):\n#     val=0\n#     for i in range(len(Y)):\n#         val=val+((Y[i]-Y_bar[i])**2)\n#     return val",
        "detail": "AI-ML-Tutorial.Error_bysklearn",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "AI-ML-Tutorial.Error_bysklearn",
        "description": "AI-ML-Tutorial.Error_bysklearn",
        "peekOfCode": "results = []\nfor name, pred in models.items():\n    mse = mean_squared_error(df[Y], df[Y_pred])\n    rmse = np.sqrt(mse)\n    mae = mean_absolute_error(df[Y], df[Y_pred])\n    r2 = r2_score(df[Y], df[Y_pred])\n    results.append({\n        \"Model\": name,\n        \"R² Score\": round(r2, 3),\n        \"RMSE\": round(rmse, 3),",
        "detail": "AI-ML-Tutorial.Error_bysklearn",
        "documentation": {}
    },
    {
        "label": "df_results",
        "kind": 5,
        "importPath": "AI-ML-Tutorial.Error_bysklearn",
        "description": "AI-ML-Tutorial.Error_bysklearn",
        "peekOfCode": "df_results = pd.DataFrame(results)\nprint(df_results)",
        "detail": "AI-ML-Tutorial.Error_bysklearn",
        "documentation": {}
    },
    {
        "label": "summation",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Linear_Regression",
        "description": "AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def summation(x, y):\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_xy = 0\n    sum_x2 = 0\n    for i in range(len(x)):\n        sum_xy += x[i] * y[i]\n        sum_x2 += x[i] ** 2 \n    return sum_x, sum_y, sum_xy, sum_x2\ndef Mean(x, y):",
        "detail": "AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "Mean",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Linear_Regression",
        "description": "AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def Mean(x, y):\n    mean_x = sum(x) / len(x)\n    mean_y = sum(y) / len(y)\n    return mean_x, mean_y\ndef M_C(x, y, n):\n    sum_x, sum_y, sum_xy, sum_x2 = summation(x, y)\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    mean_x, mean_y = Mean(x, y)\n    c = mean_y - (m * mean_x)\n    return m, c",
        "detail": "AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "M_C",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Linear_Regression",
        "description": "AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def M_C(x, y, n):\n    sum_x, sum_y, sum_xy, sum_x2 = summation(x, y)\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    mean_x, mean_y = Mean(x, y)\n    c = mean_y - (m * mean_x)\n    return m, c\ndef predict(x, m, c):\n    y_pre = []\n    for xi in x:\n        y = (m * xi) + c",
        "detail": "AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Linear_Regression",
        "description": "AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def predict(x, m, c):\n    y_pre = []\n    for xi in x:\n        y = (m * xi) + c\n        y_pre.append(y)\n    return y_pre\ndef MSE(y_true, y_pre, n):\n    total_sq_error = 0\n    for i in range(n):\n        actual = y_true[i]",
        "detail": "AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "MSE",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Linear_Regression",
        "description": "AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def MSE(y_true, y_pre, n):\n    total_sq_error = 0\n    for i in range(n):\n        actual = y_true[i]\n        pred = y_pre[i]\n        total_sq_error += int((actual - pred)**2)\n    mse = total_sq_error / n\n    return mse\ndef R2(y_true, y_pre, n):\n    mean_y = sum(y_true) / n",
        "detail": "AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "R2",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Linear_Regression",
        "description": "AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def R2(y_true, y_pre, n):\n    mean_y = sum(y_true) / n\n    numerator = 0\n    denominator = 0\n    for i in range(n):\n        actual = y_true[i]\n        pred = y_pre[i]\n        numerator += (actual - mean_y) ** 2\n        denominator += (actual - pred) ** 2\n    r2 = 1 - (denominator / numerator)",
        "detail": "AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Linear_Regression",
        "description": "AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def graph(x, y_true, y_pre):\n    plt.figure(figsize=(8, 6))\n    for i in range(len(x)):\n        plt.scatter(x[i], y_true[i], color='blue', label=\"Actual\" if i == 0 else \"\")\n        plt.scatter(x[i], y_pre[i], color='red', label=\"Predicted\" if i == 0 else \"\")\n        plt.plot([x[i], x[i]], [y_true[i], y_pre[i]], color='gray', linestyle='dashed')\n    plt.plot(x, y_pre, color='green', label=\"Regression Line\")\n    plt.xlabel(\"X values\")\n    plt.ylabel(\"Y values\")\n    plt.title(\"Linear Regression Plot\")",
        "detail": "AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Linear_Regression",
        "description": "AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def main():\n    n = int(input(\"Enter number of data points: \"))\n    x = []\n    y = []\n    for i in range(n):\n        xi = float(input(f\"Enter x[{i+1}]: \"))\n        x.append(xi)\n        yi = float(input(f\"Enter y[{i+1}]: \"))\n        y.append(yi)\n    m, c = M_C(x, y, n)",
        "detail": "AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "mtx_transpose",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def mtx_transpose(mtx):\n    rows= len(mtx)\n    cols= len(mtx[0])\n    result= []\n    for i in range(cols):\n        row= []\n        for j in range(rows):\n            row.append(mtx[j][i])\n        result.append(row)\n    return result",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "mtx_multiply",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def mtx_multiply(A, B):\n    result= []\n    for i in range(len(A)):\n        row= []\n        for j in range(len(B[0])):\n            value= 0\n            for k in range(len(B)):\n                value += A[i][k]*B[k][j]\n            row.append(value)\n        result.append(row)",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "mtx_inverse",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def mtx_inverse(mtx):\n    size= len(mtx)\n    mtx_copy= [row[:] for row in mtx]  \n    iden= []\n    for i in range(size):\n        row= []\n        for j in range(size):\n            if i==j:\n                row.append(1)\n            else:",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "mc_mtx",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def mc_mtx(x, y):\n    X1 = []\n    for row in x:\n        new_row = [1]\n        for val in row:\n            new_row.append(val)\n        X1.append(new_row)\n    Xt = mtx_transpose(X1)\n    XtX = mtx_multiply(Xt, X1)\n    XtX_inv = mtx_inverse(XtX)",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def predict(x, m, c):\n    y_pred=[]\n    for xi in x:\n        val= m * xi + c\n        y_pred.append(val)\n    return y_pred\ndef MSE(y_true, y_pre, n):\n    total_sq_error=0\n    for i in range(n):\n        total_sq_error += int((y_true[i] - y_pre[i]) ** 2)",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "MSE",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def MSE(y_true, y_pre, n):\n    total_sq_error=0\n    for i in range(n):\n        total_sq_error += int((y_true[i] - y_pre[i]) ** 2)\n    return total_sq_error / n\ndef R2(y_true, y_pre, n):\n    mean_y = sum(y_true) / n\n    numerator, denominator=0,0\n    for i in range(n):\n        numerator += (y_true[i] - y_pre[i]) ** 2",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "R2",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def R2(y_true, y_pre, n):\n    mean_y = sum(y_true) / n\n    numerator, denominator=0,0\n    for i in range(n):\n        numerator += (y_true[i] - y_pre[i]) ** 2\n        denominator += (y_true[i] - mean_y) ** 2\n    return 1 - (numerator / denominator)\ndef graph(x, y_true, y_pre):\n    for i in range(len(x)):\n        plt.scatter(x[i], y_true[i], color='blue', label=\"Actual Y\" if i == 0 else \"\")",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def graph(x, y_true, y_pre):\n    for i in range(len(x)):\n        plt.scatter(x[i], y_true[i], color='blue', label=\"Actual Y\" if i == 0 else \"\")\n        plt.scatter(x[i], y_pre[i], color='red', label=\"Predicted Y\" if i == 0 else \"\")\n        plt.plot([x[i], x[i]], [y_true[i], y_pre[i]], color='gray', linestyle='dashed')\n    plt.plot(x, y_pre, color='green', label=\"Regression Line\")\n    plt.xlabel(\"X values\")\n    plt.ylabel(\"Y values\")\n    plt.title(\"Linear Regression Plot\")\n    plt.legend()",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.matrix_mc",
        "description": "AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def main():\n    n = int(input(\"Enter number of data points: \"))\n    x,y=[],[]\n    for i in range(n):\n        a=float(input(f\"Enter x[{i+1}]: \"))\n        x.append(a)\n    for i in range(n):\n        b=float(input(f\"Enter y[{i+1}]: \"))\n        y.append(b)\n    c, m = mc_mtx(x, y)",
        "detail": "AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "mtx_trans",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Multiple_matrix",
        "description": "AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def mtx_trans(mat):\n    r=len(mat)\n    c=len(mat[0])\n    res=[]\n    for i in range(c):\n        row=[]\n        for j in range(r):\n            row.append(mat[j][i])\n        res.append(row)\n    return res",
        "detail": "AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "mat_mul",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Multiple_matrix",
        "description": "AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def mat_mul(A, B):\n    res=[]\n    for i in range(len(A)):\n        row=[]\n        for j in range(len(B[0])):\n            val=0\n            for k in range(len(B)):\n                val += A[i][k]*B[k][j]\n            row.append(val)\n        res.append(row)",
        "detail": "AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "mat_inv",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Multiple_matrix",
        "description": "AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def mat_inv(mat):\n    sz=len(mat)\n    iden=[]\n    for i in range(sz):\n        row=[]\n        for j in range(sz):\n            if i == j:\n                row.append(1)\n            else:\n                row.append(0)",
        "detail": "AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "lin_reg",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Multiple_matrix",
        "description": "AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def lin_reg(X, Y):\n    X1=[]\n    for row in X:\n        new_row=[1]\n        for val in row:\n            new_row.append(val)\n        X1.append(new_row)\n    Xt=mtx_trans(X1)\n    XtX=mat_mul(Xt, X1)\n    XtX_inv=mat_inv(XtX)",
        "detail": "AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Multiple_matrix",
        "description": "AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def predict(X, beta):\n    X1=[]\n    for row in X:\n        new_row=[1]\n        for val in row:\n            new_row.append(val)\n        X1.append(new_row)\n    res=mat_mul(X1, [[b] for b in beta])\n    y_pred=[]\n    for row in res:",
        "detail": "AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "MSE",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Multiple_matrix",
        "description": "AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def MSE(y_true, y_pred):\n    err=0\n    for i in range(len(y_true)):\n        err += int((y_true[i] - y_pred[i])**2)\n    return err/len(y_true)\ndef r2(y_true, y_pred):\n    sm=0\n    for i in range(len(y_true)):\n        sm += y_true[i]\n    mean_y=sm/len(y_true)",
        "detail": "AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Multiple_matrix",
        "description": "AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def r2(y_true, y_pred):\n    sm=0\n    for i in range(len(y_true)):\n        sm += y_true[i]\n    mean_y=sm/len(y_true)\n    num=0\n    den=0\n    for i in range(len(y_true)):\n        num += (y_true[i] - y_pred[i])**2\n        den += (y_true[i] - mean_y)**2",
        "detail": "AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.Multiple_matrix",
        "description": "AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def main():\n    n=int(input(\"Enter number of data points: \"))\n    m=int(input(\"Enter number of independent variables: \"))\n    X=[]\n    for i in range(n):\n        row=[]\n        for j in range(m):\n            row.append(float(input(f\"Enter x[{i+1}][{j+1}]: \")))\n        X.append(row)\n    Y=[]",
        "detail": "AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.R2_byVariance",
        "description": "AI-ML-Tutorial.R2_byVariance",
        "peekOfCode": "def mean(A):\n    n=len(A)\n    A_mean=sum(A)/n\n    return A_mean\n# Variance\n# def R2(X):\n#     X_mean=mean(X)\n#     r_sq=[]\n#     for i in range(len(X)):\n#         r_sq.append((X[i]-X_mean)**2)",
        "detail": "AI-ML-Tutorial.R2_byVariance",
        "documentation": {}
    },
    {
        "label": "SS_res",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.R2_byVariance",
        "description": "AI-ML-Tutorial.R2_byVariance",
        "peekOfCode": "def SS_res(Y,Y_bar):\n    val=0\n    for i in range(len(Y)):\n        val=val+((Y[i]-Y_bar[i])**2)\n    return val\ndef SS_total(Y):\n    y_mean=mean(Y)\n    total=[]\n    for i in range(len(Y)):\n        total.append((Y[i]-y_mean)**2)",
        "detail": "AI-ML-Tutorial.R2_byVariance",
        "documentation": {}
    },
    {
        "label": "SS_total",
        "kind": 2,
        "importPath": "AI-ML-Tutorial.R2_byVariance",
        "description": "AI-ML-Tutorial.R2_byVariance",
        "peekOfCode": "def SS_total(Y):\n    y_mean=mean(Y)\n    total=[]\n    for i in range(len(Y)):\n        total.append((Y[i]-y_mean)**2)\n    return sum(total)\nX=[1,2,3,4,5]\nY=[3,5,7,9,11]\nY_bar=[2.8,4.9,7.1,9.2,10.8]\nprint(f\"Observation= {X}\")",
        "detail": "AI-ML-Tutorial.R2_byVariance",
        "documentation": {}
    }
]