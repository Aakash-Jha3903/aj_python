[
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "import_module",
        "description": "import_module",
        "isExtraImport": true,
        "detail": "import_module",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "roc_auc_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "roc_curve",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "ConfusionMatrixDisplay",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "pearsonr",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "Lasso",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "Ridge",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LogisticRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "make_regression",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "make_classification",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "VarianceThreshold",
        "importPath": "sklearn.feature_selection",
        "description": "sklearn.feature_selection",
        "isExtraImport": true,
        "detail": "sklearn.feature_selection",
        "documentation": {}
    },
    {
        "label": "Figure",
        "importPath": "matplotlib.figure",
        "description": "matplotlib.figure",
        "isExtraImport": true,
        "detail": "matplotlib.figure",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "enroll_app",
        "description": "enroll_app",
        "isExtraImport": true,
        "detail": "enroll_app",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "mediapipe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mediapipe",
        "description": "mediapipe",
        "detail": "mediapipe",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "BadZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "comtypes.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "comtypes.client",
        "description": "comtypes.client",
        "detail": "comtypes.client",
        "documentation": {}
    },
    {
        "label": "write_csv",
        "kind": 2,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "def write_csv():\n\timport csv\n\t# field names\n\tfields = ['Name', 'Branch', 'Year', 'CGPA']\n\t# data rows of csv file\n\trows = [['Nikhil', 'COE', '2', '9.0'],\n\t\t\t['Sanchit', 'COE', '2', '9.1'],\n\t\t\t['Aditya', 'IT', '2', '9.3'],\n\t\t\t['Sagar', 'SE', '1', '9.5'],\n\t\t\t['Prateek', 'MCE', '3', '7.8'],",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "read_csv",
        "kind": 2,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "def read_csv():\n\tfilename = \"university_records.csv\"\n\t# initializing the titles and rows list\n\tfields = []\n\trows = []\n\t# reading csv file\n\twith open(filename, 'r') as csvfile:\n\t\t# creating a csv reader object....................\n\t\tcsvreader = csv.reader(csvfile)\n\t\tprint(\"csvreader : \",type(csvreader))",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\tfields = ['Name', 'Branch', 'Year', 'CGPA']\n\t# data rows of csv file\n\trows = [['Nikhil', 'COE', '2', '9.0'],\n\t\t\t['Sanchit', 'COE', '2', '9.1'],\n\t\t\t['Aditya', 'IT', '2', '9.3'],\n\t\t\t['Sagar', 'SE', '1', '9.5'],\n\t\t\t['Prateek', 'MCE', '3', '7.8'],\n\t\t\t['Sahil', 'EP', '2', '9.1']]\n\t# name of csv file\n\tfilename = \"university_records.csv\"",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\trows",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\trows = [['Nikhil', 'COE', '2', '9.0'],\n\t\t\t['Sanchit', 'COE', '2', '9.1'],\n\t\t\t['Aditya', 'IT', '2', '9.3'],\n\t\t\t['Sagar', 'SE', '1', '9.5'],\n\t\t\t['Prateek', 'MCE', '3', '7.8'],\n\t\t\t['Sahil', 'EP', '2', '9.1']]\n\t# name of csv file\n\tfilename = \"university_records.csv\"\n\t# writing to csv file\n\twith open(filename, 'w',newline=\"\") as csvfile:",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\tfilename",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\tfilename = \"university_records.csv\"\n\t# writing to csv file\n\twith open(filename, 'w',newline=\"\") as csvfile:\n\t\t# creating a csv writer object....................\n\t\tcsvwriter = csv.writer(csvfile)\n\t\t# writing the fields\n\t\tcsvwriter.writerow(fields)\n\t\t# writing the data rows\n\t\tcsvwriter.writerows(rows)\ndef read_csv():",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\t\tcsvwriter",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\t\tcsvwriter = csv.writer(csvfile)\n\t\t# writing the fields\n\t\tcsvwriter.writerow(fields)\n\t\t# writing the data rows\n\t\tcsvwriter.writerows(rows)\ndef read_csv():\n\tfilename = \"university_records.csv\"\n\t# initializing the titles and rows list\n\tfields = []\n\trows = []",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\tfilename",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\tfilename = \"university_records.csv\"\n\t# initializing the titles and rows list\n\tfields = []\n\trows = []\n\t# reading csv file\n\twith open(filename, 'r') as csvfile:\n\t\t# creating a csv reader object....................\n\t\tcsvreader = csv.reader(csvfile)\n\t\tprint(\"csvreader : \",type(csvreader))\n\t\t# extracting field names through first row",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\tfields = []\n\trows = []\n\t# reading csv file\n\twith open(filename, 'r') as csvfile:\n\t\t# creating a csv reader object....................\n\t\tcsvreader = csv.reader(csvfile)\n\t\tprint(\"csvreader : \",type(csvreader))\n\t\t# extracting field names through first row\n\t\tprint(\"fields : \",fields)\n\t\tfields = next(csvreader)",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\trows",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\trows = []\n\t# reading csv file\n\twith open(filename, 'r') as csvfile:\n\t\t# creating a csv reader object....................\n\t\tcsvreader = csv.reader(csvfile)\n\t\tprint(\"csvreader : \",type(csvreader))\n\t\t# extracting field names through first row\n\t\tprint(\"fields : \",fields)\n\t\tfields = next(csvreader)\n\t\tprint(\"fields : \",fields)",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\t\tcsvreader",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\t\tcsvreader = csv.reader(csvfile)\n\t\tprint(\"csvreader : \",type(csvreader))\n\t\t# extracting field names through first row\n\t\tprint(\"fields : \",fields)\n\t\tfields = next(csvreader)\n\t\tprint(\"fields : \",fields)\n\t\t# extracting each data row one by one\n\t\tfor i in csvreader:\n\t\t\trows.append(i)\n    \t# get total number of rows",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "\t\tfields",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "\t\tfields = next(csvreader)\n\t\tprint(\"fields : \",fields)\n\t\t# extracting each data row one by one\n\t\tfor i in csvreader:\n\t\t\trows.append(i)\n    \t# get total number of rows\n    \t# print(\"Total no. of rows: %d\" % (csvreader.line_num))\n\t\tprint(\"Total no. of rows : \",csvreader.line_num)\n\t# printing the field names\n\tprint('Field names are:' + ', '.join(field for field in fields))",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "l = [1, 2, 3, 4, 5, 6]\niterator = iter(l)\na = next(iterator)\nb = next(iterator)\nprint(a)\nprint(b)\nprint(type(iterator))",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "iterator",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "iterator = iter(l)\na = next(iterator)\nb = next(iterator)\nprint(a)\nprint(b)\nprint(type(iterator))",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "a = next(iterator)\nb = next(iterator)\nprint(a)\nprint(b)\nprint(type(iterator))",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.csv_gfg",
        "description": "100_Days_of_code_python.file_handling.csv_gfg",
        "peekOfCode": "b = next(iterator)\nprint(a)\nprint(b)\nprint(type(iterator))",
        "detail": "100_Days_of_code_python.file_handling.csv_gfg",
        "documentation": {}
    },
    {
        "label": "merge_pdfs",
        "kind": 2,
        "importPath": "100_Days_of_code_python.file_handling.merge_pdfs",
        "description": "100_Days_of_code_python.file_handling.merge_pdfs",
        "peekOfCode": "def merge_pdfs(input_paths, output_path):\n    with open(output_path, 'wb') as output_file:\n        for input_path in input_paths:\n            with open(input_path, 'rb') as input_file:\n                output_file.write(input_file.read())\n# Example usage:\n# pdf_files_to_merge = ['file1.pdf', 'file2.pdf', 'file3.pdf']\npdf_files_to_merge = ['7.pdf','8.pdf','9.pdf','10.pdf']\noutput_pdf = 'merged_output2.pdf'\nmerge_pdfs(pdf_files_to_merge, output_pdf)",
        "detail": "100_Days_of_code_python.file_handling.merge_pdfs",
        "documentation": {}
    },
    {
        "label": "pdf_files_to_merge",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.merge_pdfs",
        "description": "100_Days_of_code_python.file_handling.merge_pdfs",
        "peekOfCode": "pdf_files_to_merge = ['7.pdf','8.pdf','9.pdf','10.pdf']\noutput_pdf = 'merged_output2.pdf'\nmerge_pdfs(pdf_files_to_merge, output_pdf)",
        "detail": "100_Days_of_code_python.file_handling.merge_pdfs",
        "documentation": {}
    },
    {
        "label": "output_pdf",
        "kind": 5,
        "importPath": "100_Days_of_code_python.file_handling.merge_pdfs",
        "description": "100_Days_of_code_python.file_handling.merge_pdfs",
        "peekOfCode": "output_pdf = 'merged_output2.pdf'\nmerge_pdfs(pdf_files_to_merge, output_pdf)",
        "detail": "100_Days_of_code_python.file_handling.merge_pdfs",
        "documentation": {}
    },
    {
        "label": "bubble_sort",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.bubble",
        "description": "100_Days_of_code_python.PY_Practice.bubble",
        "peekOfCode": "def bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n-1):\n        # Last i elements are already in place\n        for j in range(0, n - i - 1):\n            # Traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]",
        "detail": "100_Days_of_code_python.PY_Practice.bubble",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.bubble",
        "description": "100_Days_of_code_python.PY_Practice.bubble",
        "peekOfCode": "arr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint (\"Sorted array is:\", end=\" \")\nfor i in range(len(arr)):\n    print(\"%d\" %arr[i], end=\" \")\n    bubble_sort([64, 34, 25, 12, 22, 11,\n                 90])",
        "detail": "100_Days_of_code_python.PY_Practice.bubble",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.else_while_for",
        "description": "100_Days_of_code_python.PY_Practice.else_while_for",
        "peekOfCode": "count = 5\nwhile (count > 0):\n    print(count)\n    count = count - 1\n    break\nelse:\n    print(\"I an inside else\")\nfor i in range(5):\n    print(i)\n    # break",
        "detail": "100_Days_of_code_python.PY_Practice.else_while_for",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.fun_argument",
        "description": "100_Days_of_code_python.PY_Practice.fun_argument",
        "peekOfCode": "def print_info(*args, **kwargs):\n    print(\"Positional arguments:\", args)\n    print(\"Keyword arguments:\", kwargs)\n# print_info(1, \"Hello\",'ok', name=\"Alice\", age=25)\ndef greet(name, age):\n    print(f\"Hello, {name}! You are {age} years old.\")\n# greet(name=\"Alice\", age=25)\ndef average(*numbers):\n    sum=0\n    for i in numbers:",
        "detail": "100_Days_of_code_python.PY_Practice.fun_argument",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.fun_argument",
        "description": "100_Days_of_code_python.PY_Practice.fun_argument",
        "peekOfCode": "def greet(name, age):\n    print(f\"Hello, {name}! You are {age} years old.\")\n# greet(name=\"Alice\", age=25)\ndef average(*numbers):\n    sum=0\n    for i in numbers:\n        sum+=i\n    # return 94\n    return sum/len(numbers)\nx= average(1,2,3,4,5)",
        "detail": "100_Days_of_code_python.PY_Practice.fun_argument",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.fun_argument",
        "description": "100_Days_of_code_python.PY_Practice.fun_argument",
        "peekOfCode": "def average(*numbers):\n    sum=0\n    for i in numbers:\n        sum+=i\n    # return 94\n    return sum/len(numbers)\nx= average(1,2,3,4,5)\n# print(x)\ndef name(**name):\n    print(f\"Namaste, {name['fname']} {name['mname']}  ! Nice to meet you \")",
        "detail": "100_Days_of_code_python.PY_Practice.fun_argument",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.fun_argument",
        "description": "100_Days_of_code_python.PY_Practice.fun_argument",
        "peekOfCode": "def name(**name):\n    print(f\"Namaste, {name['fname']} {name['mname']}  ! Nice to meet you \")\nname(mname=\"Bihari\",lname=\"Dubey\",fname=\"Krishna\")\n# name(\"Bihari\",\"Dubey\",\"Krishna\") #error",
        "detail": "100_Days_of_code_python.PY_Practice.fun_argument",
        "documentation": {}
    },
    {
        "label": "sin",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.import_module",
        "description": "100_Days_of_code_python.PY_Practice.import_module",
        "peekOfCode": "def sin(x):\n    return f\"This is not the sin function from math, but a custom function: {x}\"\n# Using sin without the math prefix\nresult = sin(30)\nprint(result)",
        "detail": "100_Days_of_code_python.PY_Practice.import_module",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.import_module",
        "description": "100_Days_of_code_python.PY_Practice.import_module",
        "peekOfCode": "result = sin(30)\nprint(result)",
        "detail": "100_Days_of_code_python.PY_Practice.import_module",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.join",
        "description": "100_Days_of_code_python.PY_Practice.join",
        "peekOfCode": "my_list = ['1','2']\nmy_string = \"\".join(my_list)\nprint(my_string)\ns=\"hello world !\"\nl=list(s)\nprint(l)\nmy_string = \"Hello World , Python is awesome!\"\nmy_list = my_string.split(\" \", maxsplit=1)\nprint(my_list)\nprint(\"\\n\\n\\n\")",
        "detail": "100_Days_of_code_python.PY_Practice.join",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.join",
        "description": "100_Days_of_code_python.PY_Practice.join",
        "peekOfCode": "my_string = \"\".join(my_list)\nprint(my_string)\ns=\"hello world !\"\nl=list(s)\nprint(l)\nmy_string = \"Hello World , Python is awesome!\"\nmy_list = my_string.split(\" \", maxsplit=1)\nprint(my_list)\nprint(\"\\n\\n\\n\")\nfrom import_module import *",
        "detail": "100_Days_of_code_python.PY_Practice.join",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.join",
        "description": "100_Days_of_code_python.PY_Practice.join",
        "peekOfCode": "my_string = \"Hello World , Python is awesome!\"\nmy_list = my_string.split(\" \", maxsplit=1)\nprint(my_list)\nprint(\"\\n\\n\\n\")\nfrom import_module import *\n# Using sin without any prefix\nresult = sin(45)\nprint(result)",
        "detail": "100_Days_of_code_python.PY_Practice.join",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.join",
        "description": "100_Days_of_code_python.PY_Practice.join",
        "peekOfCode": "my_list = my_string.split(\" \", maxsplit=1)\nprint(my_list)\nprint(\"\\n\\n\\n\")\nfrom import_module import *\n# Using sin without any prefix\nresult = sin(45)\nprint(result)",
        "detail": "100_Days_of_code_python.PY_Practice.join",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.join",
        "description": "100_Days_of_code_python.PY_Practice.join",
        "peekOfCode": "result = sin(45)\nprint(result)",
        "detail": "100_Days_of_code_python.PY_Practice.join",
        "documentation": {}
    },
    {
        "label": "Current_Working_Directory_and_Directory_Operations",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.os_module",
        "description": "100_Days_of_code_python.PY_Practice.os_module",
        "peekOfCode": "def Current_Working_Directory_and_Directory_Operations():\n    import os\n    # Get current working directory\n    current_directory = os.getcwd()\n    print(\"Current Working Directory:\", current_directory)\n    # List files in the current directory\n    files_in_directory = os.listdir()\n    print(\"Files in Current Directory:\", files_in_directory)\n    # Change directory\n    new_directory = \"example_directory\"",
        "detail": "100_Days_of_code_python.PY_Practice.os_module",
        "documentation": {}
    },
    {
        "label": "Path_Manipulation",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.os_module",
        "description": "100_Days_of_code_python.PY_Practice.os_module",
        "peekOfCode": "def Path_Manipulation():\n    import os\n    # Join paths\n    path1 = \"folder\"\n    path2 = \"file.txt\"\n    full_path = os.path.join(path1, path2)  \n    print(\"Full Path:\", full_path)\n    # Get absolute path\n    absolute_path = os.path.abspath(full_path)\n    print(\"Absolute Path:\", absolute_path)",
        "detail": "100_Days_of_code_python.PY_Practice.os_module",
        "documentation": {}
    },
    {
        "label": "File_and_Directory_Information",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.os_module",
        "description": "100_Days_of_code_python.PY_Practice.os_module",
        "peekOfCode": "def File_and_Directory_Information():\n    import os\n    # Check if a path exists\n    path_to_check = \"example_directory\"\n    if os.path.exists(path_to_check):\n        print(f\"{path_to_check} exists.\")\n    # Check if it's a file or directory\n    if os.path.isdir(path_to_check):\n        print(f\"{path_to_check} is a directory.\")\n    elif os.path.isfile(path_to_check):",
        "detail": "100_Days_of_code_python.PY_Practice.os_module",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  File_and_Directory_Manipulation():\n    import os\n    # Remove a file\n    file_to_remove = \"example_file.txt\"\n    if os.path.exists(file_to_remove):\n        os.remove(file_to_remove)\n        print(f\"{file_to_remove} removed.\")\n    # Remove a directory\n    directory_to_remove = \"example_directory\"\n    if os.path.exists(directory_to_remove):"
        },
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.os_module",
        "description": "100_Days_of_code_python.PY_Practice.os_module",
        "peekOfCode": "def  File_and_Directory_Manipulation():\n    import os\n    # Remove a file\n    file_to_remove = \"example_file.txt\"\n    if os.path.exists(file_to_remove):\n        os.remove(file_to_remove)\n        print(f\"{file_to_remove} removed.\")\n    # Remove a directory\n    directory_to_remove = \"example_directory\"\n    if os.path.exists(directory_to_remove):",
        "detail": "100_Days_of_code_python.PY_Practice.os_module",
        "documentation": {}
    },
    {
        "label": "Executing_Shell_Commands",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.os_module",
        "description": "100_Days_of_code_python.PY_Practice.os_module",
        "peekOfCode": "def Executing_Shell_Commands():\n    import os  \n    # Execute a shell command\n    # os.system(\"echo Hello, OS Module!\")\n    # Print the current working directory\n    # os.system(\"cd\")\n    # List files in the current directory\n    # os.system(\"dir\")\n    # Display system information\n    # os.system(\"systeminfo\")",
        "detail": "100_Days_of_code_python.PY_Practice.os_module",
        "documentation": {}
    },
    {
        "label": "Environment_Variables",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.os_module",
        "description": "100_Days_of_code_python.PY_Practice.os_module",
        "peekOfCode": "def Environment_Variables():\n    import os\n    # Get the value of an environment variable\n    username = os.getenv(\"USER\", \"Guest\")\n    print(\"Current User:\", username)\n    # Access the entire environment variables dictionary\n    all_env_variables = os.environ\n    print(\"All Environment Variables:\", all_env_variables)\n#..........................................................................................\n#..........................................................................................",
        "detail": "100_Days_of_code_python.PY_Practice.os_module",
        "documentation": {}
    },
    {
        "label": "popular",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.os_module",
        "description": "100_Days_of_code_python.PY_Practice.os_module",
        "peekOfCode": "def popular(mod):\n    def Working_with_Directories():\n        import os\n        # Example 1: Get the current working directory\n        current_directory = os.getcwd()\n        print(\"Current Directory:\", current_directory)\n        # Example 2: Change the current working directory\n        new_directory = '/path/to/new_directory'\n        os.chdir(new_directory)\n        # Example 3: List files in the current directory",
        "detail": "100_Days_of_code_python.PY_Practice.os_module",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.range_fun",
        "description": "100_Days_of_code_python.PY_Practice.range_fun",
        "peekOfCode": "t2 = tuple(i for i in range(11))\nprint(\"List: \",l)\nprint(\"Tuple: \", t)\nprint(\"String: \", s)\nprint(\"Generated Tuple t2: \", t2)\nprint(n)\nprint(3 in range(5))  # True\nprint(7 not in range(5))  # True",
        "detail": "100_Days_of_code_python.PY_Practice.range_fun",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.set",
        "description": "100_Days_of_code_python.PY_Practice.set",
        "peekOfCode": "s1 = {1, 2, 5, 6}\ns2 = {3, 6, 7}\n# print(\"Union\", set.union(s1, s2))  # Union of two sets\n# print(\"intersection : \", set.intersection(s1, s2))  # Intersection of two sets\n# print(\"intersection : \", s1.intersection(s2))  # Intersection of two sets\n# print(\"difference\", set.difference(s1, s2))  # Difference between set1 and\n# print(\"symmetric_difference\",set.symmetric_difference(s1, s2))  # Sym\n# s3=s1.symmetric_difference(s2)\n# print(\"symmetric_difference\",s3)\n# s4 = s1.copy()",
        "detail": "100_Days_of_code_python.PY_Practice.set",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "100_Days_of_code_python.PY_Practice.set",
        "description": "100_Days_of_code_python.PY_Practice.set",
        "peekOfCode": "s2 = {3, 6, 7}\n# print(\"Union\", set.union(s1, s2))  # Union of two sets\n# print(\"intersection : \", set.intersection(s1, s2))  # Intersection of two sets\n# print(\"intersection : \", s1.intersection(s2))  # Intersection of two sets\n# print(\"difference\", set.difference(s1, s2))  # Difference between set1 and\n# print(\"symmetric_difference\",set.symmetric_difference(s1, s2))  # Sym\n# s3=s1.symmetric_difference(s2)\n# print(\"symmetric_difference\",s3)\n# s4 = s1.copy()\n# s4.symmetric_difference_update(s2)",
        "detail": "100_Days_of_code_python.PY_Practice.set",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.wifi",
        "description": "100_Days_of_code_python.PY_Practice.wifi",
        "peekOfCode": "def one():\n    import os\n    # Run the command to list Wi-Fi profiles and their passwords\n    os.system('netsh wlan show profiles')\n    # Replace 'Your_WiFi_Name' with the actual Wi-Fi profile name\n    wifi_name = 'ABESIT (2.4 G)'\n    os.system(f'netsh wlan show profile name=\"{wifi_name}\" key=clear')\ndef all():\n    import os\n    # Run the command to list all Wi-Fi profiles",
        "detail": "100_Days_of_code_python.PY_Practice.wifi",
        "documentation": {}
    },
    {
        "label": "all",
        "kind": 2,
        "importPath": "100_Days_of_code_python.PY_Practice.wifi",
        "description": "100_Days_of_code_python.PY_Practice.wifi",
        "peekOfCode": "def all():\n    import os\n    # Run the command to list all Wi-Fi profiles\n    wifi_profiles = os.popen('netsh wlan show profiles').read()\n    # Extract Wi-Fi profile names\n    profile_names = [line.split(\":\")[1].strip() for line in wifi_profiles.splitlines() if \"All User Profile\" in line]\n    # Iterate through profiles and retrieve passwords\n    for profile_name in profile_names:\n        password_info = os.popen(f'netsh wlan show profile name=\"{profile_name}\" key=clear').read()\n        print(f\"\\nWi-Fi Profile: {profile_name}\")",
        "detail": "100_Days_of_code_python.PY_Practice.wifi",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.different_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.different_matrix",
        "peekOfCode": "results = []\nfor name, pred in models.items():\n    mse = mean_squared_error(actual, pred)\n    rmse = np.sqrt(mse)\n    mae = mean_absolute_error(actual, pred)\n    r2 = r2_score(actual, pred)\n    results.append({\n        \"Model\": name,\n        \"R² Score\": round(r2, 3),\n        \"RMSE\": round(rmse, 3),",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.different_matrix",
        "documentation": {}
    },
    {
        "label": "df_results",
        "kind": 5,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.different_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.different_matrix",
        "peekOfCode": "df_results = pd.DataFrame(results)\nprint(df_results)\nplt.figure(figsize=(10,6))\nplt.plot(actual,\"o-\",label=\"Actual(Y)\", color=\"blue\")\nplt.plot(pred,\"s--\",label=\"Predicted(Y_bar)\", color=\"green\")\nfor i in range(len(actual)):\n    plt.plot([i,i],[actual[i],pred[i]], \"orange\", linestyle=\"--\", linewidth=1)\nplt.title(f\"Mean Absolute Error(MAE) Visualization\\nMAE={mae:.3f}\" )\nplt.xlabel(\"Observation Index\")\nplt.ylabel(\"Value\")",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.different_matrix",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "peekOfCode": "def mean(A):\n    n=len(A)\n    A_mean=sum(A)/n\n    return A_mean\n# R square\n# def SS_res(Y,Y_bar):\n#     val=0\n#     for i in range(len(Y)):\n#         val=val+((Y[i]-Y_bar[i])**2)\n#     return val",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "peekOfCode": "results = []\nfor name, pred in models.items():\n    mse = mean_squared_error(df[Y], df[Y_pred])\n    rmse = np.sqrt(mse)\n    mae = mean_absolute_error(df[Y], df[Y_pred])\n    r2 = r2_score(df[Y], df[Y_pred])\n    results.append({\n        \"Model\": name,\n        \"R² Score\": round(r2, 3),\n        \"RMSE\": round(rmse, 3),",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "documentation": {}
    },
    {
        "label": "df_results",
        "kind": 5,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "peekOfCode": "df_results = pd.DataFrame(results)\nprint(df_results)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Error_bysklearn",
        "documentation": {}
    },
    {
        "label": "summation",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def summation(x, y):\n    sum_x = sum(x)\n    sum_y = sum(y)\n    sum_xy = 0\n    sum_x2 = 0\n    for i in range(len(x)):\n        sum_xy += x[i] * y[i]\n        sum_x2 += x[i] ** 2 \n    return sum_x, sum_y, sum_xy, sum_x2\ndef Mean(x, y):",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "Mean",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def Mean(x, y):\n    mean_x = sum(x) / len(x)\n    mean_y = sum(y) / len(y)\n    return mean_x, mean_y\ndef M_C(x, y, n):\n    sum_x, sum_y, sum_xy, sum_x2 = summation(x, y)\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    mean_x, mean_y = Mean(x, y)\n    c = mean_y - (m * mean_x)\n    return m, c",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "M_C",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def M_C(x, y, n):\n    sum_x, sum_y, sum_xy, sum_x2 = summation(x, y)\n    m = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2)\n    mean_x, mean_y = Mean(x, y)\n    c = mean_y - (m * mean_x)\n    return m, c\ndef predict(x, m, c):\n    y_pre = []\n    for xi in x:\n        y = (m * xi) + c",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def predict(x, m, c):\n    y_pre = []\n    for xi in x:\n        y = (m * xi) + c\n        y_pre.append(y)\n    return y_pre\ndef MSE(y_true, y_pre, n):\n    total_sq_error = 0\n    for i in range(n):\n        actual = y_true[i]",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "MSE",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def MSE(y_true, y_pre, n):\n    total_sq_error = 0\n    for i in range(n):\n        actual = y_true[i]\n        pred = y_pre[i]\n        total_sq_error += int((actual - pred)**2)\n    mse = total_sq_error / n\n    return mse\ndef R2(y_true, y_pre, n):\n    mean_y = sum(y_true) / n",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "R2",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def R2(y_true, y_pre, n):\n    mean_y = sum(y_true) / n\n    numerator = 0\n    denominator = 0\n    for i in range(n):\n        actual = y_true[i]\n        pred = y_pre[i]\n        numerator += (actual - mean_y) ** 2\n        denominator += (actual - pred) ** 2\n    r2 = 1 - (denominator / numerator)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def graph(x, y_true, y_pre):\n    plt.figure(figsize=(8, 6))\n    for i in range(len(x)):\n        plt.scatter(x[i], y_true[i], color='blue', label=\"Actual\" if i == 0 else \"\")\n        plt.scatter(x[i], y_pre[i], color='red', label=\"Predicted\" if i == 0 else \"\")\n        plt.plot([x[i], x[i]], [y_true[i], y_pre[i]], color='gray', linestyle='dashed')\n    plt.plot(x, y_pre, color='green', label=\"Regression Line\")\n    plt.xlabel(\"X values\")\n    plt.ylabel(\"Y values\")\n    plt.title(\"Linear Regression Plot\")",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "peekOfCode": "def main():\n    n = int(input(\"Enter number of data points: \"))\n    x = []\n    y = []\n    for i in range(n):\n        xi = float(input(f\"Enter x[{i+1}]: \"))\n        x.append(xi)\n        yi = float(input(f\"Enter y[{i+1}]: \"))\n        y.append(yi)\n    m, c = M_C(x, y, n)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Linear_Regression",
        "documentation": {}
    },
    {
        "label": "auc_score",
        "kind": 5,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Logistic_Regression",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Logistic_Regression",
        "peekOfCode": "auc_score = roc_auc_score(y_test, y_prob)\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {auc_score:.2f})')\nplt.plot([0, 1], [0, 1], color='navy', linestyle='--')\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"Receiver Operating Characteristic\")\nplt.legend(loc=\"lower right\")\nplt.grid()\nplt.show()",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Logistic_Regression",
        "documentation": {}
    },
    {
        "label": "mtx_transpose",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def mtx_transpose(mtx):\n    rows= len(mtx)\n    cols= len(mtx[0])\n    result= []\n    for i in range(cols):\n        row= []\n        for j in range(rows):\n            row.append(mtx[j][i])\n        result.append(row)\n    return result",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "mtx_multiply",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def mtx_multiply(A, B):\n    result= []\n    for i in range(len(A)):\n        row= []\n        for j in range(len(B[0])):\n            value= 0\n            for k in range(len(B)):\n                value += A[i][k]*B[k][j]\n            row.append(value)\n        result.append(row)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "mtx_inverse",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def mtx_inverse(mtx):\n    size= len(mtx)\n    mtx_copy= [row[:] for row in mtx]  \n    iden= []\n    for i in range(size):\n        row= []\n        for j in range(size):\n            if i==j:\n                row.append(1)\n            else:",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "mc_mtx",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def mc_mtx(x, y):\n    X1 = []\n    for row in x:\n        new_row = [1]\n        for val in row:\n            new_row.append(val)\n        X1.append(new_row)\n    Xt = mtx_transpose(X1)\n    XtX = mtx_multiply(Xt, X1)\n    XtX_inv = mtx_inverse(XtX)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def predict(x, m, c):\n    y_pred=[]\n    for xi in x:\n        val= m * xi + c\n        y_pred.append(val)\n    return y_pred\ndef MSE(y_true, y_pre, n):\n    total_sq_error=0\n    for i in range(n):\n        total_sq_error += int((y_true[i] - y_pre[i]) ** 2)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "MSE",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def MSE(y_true, y_pre, n):\n    total_sq_error=0\n    for i in range(n):\n        total_sq_error += int((y_true[i] - y_pre[i]) ** 2)\n    return total_sq_error / n\ndef R2(y_true, y_pre, n):\n    mean_y = sum(y_true) / n\n    numerator, denominator=0,0\n    for i in range(n):\n        numerator += (y_true[i] - y_pre[i]) ** 2",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "R2",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def R2(y_true, y_pre, n):\n    mean_y = sum(y_true) / n\n    numerator, denominator=0,0\n    for i in range(n):\n        numerator += (y_true[i] - y_pre[i]) ** 2\n        denominator += (y_true[i] - mean_y) ** 2\n    return 1 - (numerator / denominator)\ndef graph(x, y_true, y_pre):\n    for i in range(len(x)):\n        plt.scatter(x[i], y_true[i], color='blue', label=\"Actual Y\" if i == 0 else \"\")",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def graph(x, y_true, y_pre):\n    for i in range(len(x)):\n        plt.scatter(x[i], y_true[i], color='blue', label=\"Actual Y\" if i == 0 else \"\")\n        plt.scatter(x[i], y_pre[i], color='red', label=\"Predicted Y\" if i == 0 else \"\")\n        plt.plot([x[i], x[i]], [y_true[i], y_pre[i]], color='gray', linestyle='dashed')\n    plt.plot(x, y_pre, color='green', label=\"Regression Line\")\n    plt.xlabel(\"X values\")\n    plt.ylabel(\"Y values\")\n    plt.title(\"Linear Regression Plot\")\n    plt.legend()",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "peekOfCode": "def main():\n    n = int(input(\"Enter number of data points: \"))\n    x,y=[],[]\n    for i in range(n):\n        a=float(input(f\"Enter x[{i+1}]: \"))\n        x.append(a)\n    for i in range(n):\n        b=float(input(f\"Enter y[{i+1}]: \"))\n        y.append(b)\n    c, m = mc_mtx(x, y)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.matrix_mc",
        "documentation": {}
    },
    {
        "label": "mtx_trans",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def mtx_trans(mat):\n    r=len(mat)\n    c=len(mat[0])\n    res=[]\n    for i in range(c):\n        row=[]\n        for j in range(r):\n            row.append(mat[j][i])\n        res.append(row)\n    return res",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "mat_mul",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def mat_mul(A, B):\n    res=[]\n    for i in range(len(A)):\n        row=[]\n        for j in range(len(B[0])):\n            val=0\n            for k in range(len(B)):\n                val += A[i][k]*B[k][j]\n            row.append(val)\n        res.append(row)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "mat_inv",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def mat_inv(mat):\n    sz=len(mat)\n    iden=[]\n    for i in range(sz):\n        row=[]\n        for j in range(sz):\n            if i == j:\n                row.append(1)\n            else:\n                row.append(0)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "lin_reg",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def lin_reg(X, Y):\n    X1=[]\n    for row in X:\n        new_row=[1]\n        for val in row:\n            new_row.append(val)\n        X1.append(new_row)\n    Xt=mtx_trans(X1)\n    XtX=mat_mul(Xt, X1)\n    XtX_inv=mat_inv(XtX)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def predict(X, beta):\n    X1=[]\n    for row in X:\n        new_row=[1]\n        for val in row:\n            new_row.append(val)\n        X1.append(new_row)\n    res=mat_mul(X1, [[b] for b in beta])\n    y_pred=[]\n    for row in res:",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "MSE",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def MSE(y_true, y_pred):\n    err=0\n    for i in range(len(y_true)):\n        err += int((y_true[i] - y_pred[i])**2)\n    return err/len(y_true)\ndef r2(y_true, y_pred):\n    sm=0\n    for i in range(len(y_true)):\n        sm += y_true[i]\n    mean_y=sm/len(y_true)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def r2(y_true, y_pred):\n    sm=0\n    for i in range(len(y_true)):\n        sm += y_true[i]\n    mean_y=sm/len(y_true)\n    num=0\n    den=0\n    for i in range(len(y_true)):\n        num += (y_true[i] - y_pred[i])**2\n        den += (y_true[i] - mean_y)**2",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "peekOfCode": "def main():\n    n=int(input(\"Enter number of data points: \"))\n    m=int(input(\"Enter number of independent variables: \"))\n    X=[]\n    for i in range(n):\n        row=[]\n        for j in range(m):\n            row.append(float(input(f\"Enter x[{i+1}][{j+1}]: \")))\n        X.append(row)\n    Y=[]",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.Multiple_matrix",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "peekOfCode": "def mean(A):\n    n=len(A)\n    A_mean=sum(A)/n\n    return A_mean\n# Variance\n# def R2(X):\n#     X_mean=mean(X)\n#     r_sq=[]\n#     for i in range(len(X)):\n#         r_sq.append((X[i]-X_mean)**2)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "documentation": {}
    },
    {
        "label": "SS_res",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "peekOfCode": "def SS_res(Y,Y_bar):\n    val=0\n    for i in range(len(Y)):\n        val=val+((Y[i]-Y_bar[i])**2)\n    return val\ndef SS_total(Y):\n    y_mean=mean(Y)\n    total=[]\n    for i in range(len(Y)):\n        total.append((Y[i]-y_mean)**2)",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "documentation": {}
    },
    {
        "label": "SS_total",
        "kind": 2,
        "importPath": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "description": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "peekOfCode": "def SS_total(Y):\n    y_mean=mean(Y)\n    total=[]\n    for i in range(len(Y)):\n        total.append((Y[i]-y_mean)**2)\n    return sum(total)\nX=[1,2,3,4,5]\nY=[3,5,7,9,11]\nY_bar=[2.8,4.9,7.1,9.2,10.8]\nprint(f\"Observation= {X}\")",
        "detail": "ai_mL_ABESIT.AI-ML-Tutorial.R2_byVariance",
        "documentation": {}
    },
    {
        "label": "barh",
        "kind": 2,
        "importPath": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "description": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "peekOfCode": "def barh():\n    plt.bar(x,y ,color = \"hotpink\" ,height = 0.1)   # For horizontal bars, use height instead of width.\n    plt.show()",
        "detail": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "description": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "peekOfCode": "x = [\"A\", \"B\", \"C\", \"D\"]\ny = [4, 9, 5, 11]\nplt.bar(x,y ,color = \"hotpink\" ,width = 0.1)\nplt.show()\n# plt.barh(x, y)  # h for horizontal\nplt.show()\ndef barh():\n    plt.bar(x,y ,color = \"hotpink\" ,height = 0.1)   # For horizontal bars, use height instead of width.\n    plt.show()",
        "detail": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "description": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "peekOfCode": "y = [4, 9, 5, 11]\nplt.bar(x,y ,color = \"hotpink\" ,width = 0.1)\nplt.show()\n# plt.barh(x, y)  # h for horizontal\nplt.show()\ndef barh():\n    plt.bar(x,y ,color = \"hotpink\" ,height = 0.1)   # For horizontal bars, use height instead of width.\n    plt.show()",
        "detail": "aj_matplotlib.Bars . Hist & PieCharts.first_bar",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "aj_matplotlib.Bars . Hist & PieCharts.first_hist",
        "description": "aj_matplotlib.Bars . Hist & PieCharts.first_hist",
        "peekOfCode": "x = np.random.normal(170, 10, 250)\nplt.hist(x)\nplt.show()",
        "detail": "aj_matplotlib.Bars . Hist & PieCharts.first_hist",
        "documentation": {}
    },
    {
        "label": "mylabels",
        "kind": 5,
        "importPath": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "description": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "peekOfCode": "mylabels = [\"Apples\", \"Bananas\", \"Cherries\", \"Dates\"]\nmyexplode = [0.2, 0.5, 0, 1]\nmycolors = [\"black\", \"hotpink\", \"g\", \"r\"]\nx = [35, 25, 25, 15]\n# default start angle is at the x-axis, but you can change the start angle by specifying a startangle paramete(default angle is 0).\n# plt.pie(x, labels = mylabels, startangle = 90)\n# plt.pie(x, labels=mylabels, explode=myexplode, shadow=True,colors=mycolors)\nplt.pie(x, labels=mylabels)\nplt.legend()    # To add a list of explanation for each wedge, use the legend() function:\nplt.title(\"Fruits Pie-Charts\")",
        "detail": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "documentation": {}
    },
    {
        "label": "myexplode",
        "kind": 5,
        "importPath": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "description": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "peekOfCode": "myexplode = [0.2, 0.5, 0, 1]\nmycolors = [\"black\", \"hotpink\", \"g\", \"r\"]\nx = [35, 25, 25, 15]\n# default start angle is at the x-axis, but you can change the start angle by specifying a startangle paramete(default angle is 0).\n# plt.pie(x, labels = mylabels, startangle = 90)\n# plt.pie(x, labels=mylabels, explode=myexplode, shadow=True,colors=mycolors)\nplt.pie(x, labels=mylabels)\nplt.legend()    # To add a list of explanation for each wedge, use the legend() function:\nplt.title(\"Fruits Pie-Charts\")\nplt.show()",
        "detail": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "documentation": {}
    },
    {
        "label": "mycolors",
        "kind": 5,
        "importPath": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "description": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "peekOfCode": "mycolors = [\"black\", \"hotpink\", \"g\", \"r\"]\nx = [35, 25, 25, 15]\n# default start angle is at the x-axis, but you can change the start angle by specifying a startangle paramete(default angle is 0).\n# plt.pie(x, labels = mylabels, startangle = 90)\n# plt.pie(x, labels=mylabels, explode=myexplode, shadow=True,colors=mycolors)\nplt.pie(x, labels=mylabels)\nplt.legend()    # To add a list of explanation for each wedge, use the legend() function:\nplt.title(\"Fruits Pie-Charts\")\nplt.show()",
        "detail": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "description": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "peekOfCode": "x = [35, 25, 25, 15]\n# default start angle is at the x-axis, but you can change the start angle by specifying a startangle paramete(default angle is 0).\n# plt.pie(x, labels = mylabels, startangle = 90)\n# plt.pie(x, labels=mylabels, explode=myexplode, shadow=True,colors=mycolors)\nplt.pie(x, labels=mylabels)\nplt.legend()    # To add a list of explanation for each wedge, use the legend() function:\nplt.title(\"Fruits Pie-Charts\")\nplt.show()",
        "detail": "aj_matplotlib.Bars . Hist & PieCharts.first_piechart",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.first_graph",
        "description": "aj_matplotlib.Graphs.first_graph",
        "peekOfCode": "x = [1, 15, 13, 42, 15]   # len of x and y must be same !!\ny = [i for i in range(0, 10, 2)]\n# plt.plot([1, 2, 3, 4], [1, 10, 19, 16])  #we plot without using separate variables\nplt.plot(x, y, color=\"orangered\", linewidth=2, linestyle=\"dotted\")\n# plt.plot(x, y, marker=\"+\" , markersize=\"20\")    # marker is used for point custmization(color,pattern,size,etc)\n# plt.plot(x, y,\"o:r\")     # marker|line|color  , without space\n# plt.plot(x,y,alpha=0.5)     # alpha is from 0 to 1 , it defines the visibility level of line\nfont1 = {'family': 'serif', 'color': 'red', 'size': 20}\nfont2 = {'family': 'serif', 'color':\"b\", 'size': 15}\nplt.title(\"Student Data\", fontdict=font1 ,  loc = 'left')",
        "detail": "aj_matplotlib.Graphs.first_graph",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.first_graph",
        "description": "aj_matplotlib.Graphs.first_graph",
        "peekOfCode": "y = [i for i in range(0, 10, 2)]\n# plt.plot([1, 2, 3, 4], [1, 10, 19, 16])  #we plot without using separate variables\nplt.plot(x, y, color=\"orangered\", linewidth=2, linestyle=\"dotted\")\n# plt.plot(x, y, marker=\"+\" , markersize=\"20\")    # marker is used for point custmization(color,pattern,size,etc)\n# plt.plot(x, y,\"o:r\")     # marker|line|color  , without space\n# plt.plot(x,y,alpha=0.5)     # alpha is from 0 to 1 , it defines the visibility level of line\nfont1 = {'family': 'serif', 'color': 'red', 'size': 20}\nfont2 = {'family': 'serif', 'color':\"b\", 'size': 15}\nplt.title(\"Student Data\", fontdict=font1 ,  loc = 'left')\nplt.xlabel(\"student\", fontdict=font2)",
        "detail": "aj_matplotlib.Graphs.first_graph",
        "documentation": {}
    },
    {
        "label": "font1",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.first_graph",
        "description": "aj_matplotlib.Graphs.first_graph",
        "peekOfCode": "font1 = {'family': 'serif', 'color': 'red', 'size': 20}\nfont2 = {'family': 'serif', 'color':\"b\", 'size': 15}\nplt.title(\"Student Data\", fontdict=font1 ,  loc = 'left')\nplt.xlabel(\"student\", fontdict=font2)\nplt.ylabel(\"Class\", fontdict=font2)\nplt.grid()  # add grid in the background\n# plt.scatter(x, y)     # directly map the points only\nplt.show()  # To display the plot",
        "detail": "aj_matplotlib.Graphs.first_graph",
        "documentation": {}
    },
    {
        "label": "font2",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.first_graph",
        "description": "aj_matplotlib.Graphs.first_graph",
        "peekOfCode": "font2 = {'family': 'serif', 'color':\"b\", 'size': 15}\nplt.title(\"Student Data\", fontdict=font1 ,  loc = 'left')\nplt.xlabel(\"student\", fontdict=font2)\nplt.ylabel(\"Class\", fontdict=font2)\nplt.grid()  # add grid in the background\n# plt.scatter(x, y)     # directly map the points only\nplt.show()  # To display the plot",
        "detail": "aj_matplotlib.Graphs.first_graph",
        "documentation": {}
    },
    {
        "label": "multiple_line",
        "kind": 2,
        "importPath": "aj_matplotlib.Graphs.multi line",
        "description": "aj_matplotlib.Graphs.multi line",
        "peekOfCode": "def multiple_line():\n    # Draw two lines by specifiyng the x- and y-point values for both lines:\n    plt.plot(x1, y1,  x2, y2,  x3, y3)\n    plt.show()\ndef subplot():\n    # `plt.figure(figsize=(width, height))` function use Before creating the subplots. For example,\n    # `plt.figure(figsize=(10, 5))` will create a figure with a width of 10 inches and a height of 5\n    # inches.\n    plt.figure(figsize=(12, 5))\n    #subplot() function use to draw multiple plots in ONE figure:",
        "detail": "aj_matplotlib.Graphs.multi line",
        "documentation": {}
    },
    {
        "label": "subplot",
        "kind": 2,
        "importPath": "aj_matplotlib.Graphs.multi line",
        "description": "aj_matplotlib.Graphs.multi line",
        "peekOfCode": "def subplot():\n    # `plt.figure(figsize=(width, height))` function use Before creating the subplots. For example,\n    # `plt.figure(figsize=(10, 5))` will create a figure with a width of 10 inches and a height of 5\n    # inches.\n    plt.figure(figsize=(12, 5))\n    #subplot() function use to draw multiple plots in ONE figure:\n    # rows and columns, index of the current plot.\n    plt.subplot(1, 3, 1)\n    plt.plot(x1,y1,\"orange\")\n    plt.title(\"First\")  #order matters *********",
        "detail": "aj_matplotlib.Graphs.multi line",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.multi line",
        "description": "aj_matplotlib.Graphs.multi line",
        "peekOfCode": "x1 = np.array([0, 1, 2, 3])\ny1 = np.array([3, 8, 1, 10])\nx2 = np.array([0, 1, 2, 3])\ny2 = np.array([6, 2, 7, 11])\nx3 = np.array([0, 11, 12, 13])\ny3 = np.array([6, 12, 7, 11])\ndef multiple_line():\n    # Draw two lines by specifiyng the x- and y-point values for both lines:\n    plt.plot(x1, y1,  x2, y2,  x3, y3)\n    plt.show()",
        "detail": "aj_matplotlib.Graphs.multi line",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.multi line",
        "description": "aj_matplotlib.Graphs.multi line",
        "peekOfCode": "y1 = np.array([3, 8, 1, 10])\nx2 = np.array([0, 1, 2, 3])\ny2 = np.array([6, 2, 7, 11])\nx3 = np.array([0, 11, 12, 13])\ny3 = np.array([6, 12, 7, 11])\ndef multiple_line():\n    # Draw two lines by specifiyng the x- and y-point values for both lines:\n    plt.plot(x1, y1,  x2, y2,  x3, y3)\n    plt.show()\ndef subplot():",
        "detail": "aj_matplotlib.Graphs.multi line",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.multi line",
        "description": "aj_matplotlib.Graphs.multi line",
        "peekOfCode": "x2 = np.array([0, 1, 2, 3])\ny2 = np.array([6, 2, 7, 11])\nx3 = np.array([0, 11, 12, 13])\ny3 = np.array([6, 12, 7, 11])\ndef multiple_line():\n    # Draw two lines by specifiyng the x- and y-point values for both lines:\n    plt.plot(x1, y1,  x2, y2,  x3, y3)\n    plt.show()\ndef subplot():\n    # `plt.figure(figsize=(width, height))` function use Before creating the subplots. For example,",
        "detail": "aj_matplotlib.Graphs.multi line",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.multi line",
        "description": "aj_matplotlib.Graphs.multi line",
        "peekOfCode": "y2 = np.array([6, 2, 7, 11])\nx3 = np.array([0, 11, 12, 13])\ny3 = np.array([6, 12, 7, 11])\ndef multiple_line():\n    # Draw two lines by specifiyng the x- and y-point values for both lines:\n    plt.plot(x1, y1,  x2, y2,  x3, y3)\n    plt.show()\ndef subplot():\n    # `plt.figure(figsize=(width, height))` function use Before creating the subplots. For example,\n    # `plt.figure(figsize=(10, 5))` will create a figure with a width of 10 inches and a height of 5",
        "detail": "aj_matplotlib.Graphs.multi line",
        "documentation": {}
    },
    {
        "label": "x3",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.multi line",
        "description": "aj_matplotlib.Graphs.multi line",
        "peekOfCode": "x3 = np.array([0, 11, 12, 13])\ny3 = np.array([6, 12, 7, 11])\ndef multiple_line():\n    # Draw two lines by specifiyng the x- and y-point values for both lines:\n    plt.plot(x1, y1,  x2, y2,  x3, y3)\n    plt.show()\ndef subplot():\n    # `plt.figure(figsize=(width, height))` function use Before creating the subplots. For example,\n    # `plt.figure(figsize=(10, 5))` will create a figure with a width of 10 inches and a height of 5\n    # inches.",
        "detail": "aj_matplotlib.Graphs.multi line",
        "documentation": {}
    },
    {
        "label": "y3",
        "kind": 5,
        "importPath": "aj_matplotlib.Graphs.multi line",
        "description": "aj_matplotlib.Graphs.multi line",
        "peekOfCode": "y3 = np.array([6, 12, 7, 11])\ndef multiple_line():\n    # Draw two lines by specifiyng the x- and y-point values for both lines:\n    plt.plot(x1, y1,  x2, y2,  x3, y3)\n    plt.show()\ndef subplot():\n    # `plt.figure(figsize=(width, height))` function use Before creating the subplots. For example,\n    # `plt.figure(figsize=(10, 5))` will create a figure with a width of 10 inches and a height of 5\n    # inches.\n    plt.figure(figsize=(12, 5))",
        "detail": "aj_matplotlib.Graphs.multi line",
        "documentation": {}
    },
    {
        "label": "axis_range",
        "kind": 2,
        "importPath": "aj_matplotlib.Graphs.size",
        "description": "aj_matplotlib.Graphs.size",
        "peekOfCode": "def axis_range():\n    x = [1, 15, 13, 42, 15]   # len of x and y must be same !!\n    y = [i for i in range(0, 10, 2)]\n    plt.plot(x,y)\n    plt.axis([0, 600, 0, 200])  # axis range [xmin, xmax, ymin, ymax]\n    plt.show()\ndef figure_size():\n    from matplotlib.figure import Figure  \n    # Creating a new figure with width = 5 inches and height = 4 inches \n    fig = plt.figure(figsize =(5, 4)) ",
        "detail": "aj_matplotlib.Graphs.size",
        "documentation": {}
    },
    {
        "label": "figure_size",
        "kind": 2,
        "importPath": "aj_matplotlib.Graphs.size",
        "description": "aj_matplotlib.Graphs.size",
        "peekOfCode": "def figure_size():\n    from matplotlib.figure import Figure  \n    # Creating a new figure with width = 5 inches and height = 4 inches \n    fig = plt.figure(figsize =(5, 4)) \n    # Creating a new axes for the figure \n    ax = fig.add_axes([1, 1, 1, 1])  \n    # Adding the data to be plotted \n    ax.plot([2, 3, 4, 5, 5, 6, 6], [5, 7, 1, 3, 4, 6 ,8]) \n    plt.show()\naxis_range()",
        "detail": "aj_matplotlib.Graphs.size",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.asgi",
        "description": "Django_GS.CRUD_GS.CRUD_GS.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-m*js)@x4-15n(5ygzu4*@*dxyr7cky3_3_guxhhr!%c-r7ceq8'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-m*js)@x4-15n(5ygzu4*@*dxyr7cky3_3_guxhhr!%c-r7ceq8'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'enroll_app',",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'enroll_app',\n]\nMIDDLEWARE = [",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'CRUD_GS.urls'",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "ROOT_URLCONF = 'CRUD_GS.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "WSGI_APPLICATION = 'CRUD_GS.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "description": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.urls",
        "description": "Django_GS.CRUD_GS.CRUD_GS.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.add_show, name=\"addShow\"),\n    path('delete/<int:id>/', views.delete_data, name=\"deleteData\"),\n    path('update/<int:id>', views.update_data, name=\"updateData\"),\n]",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Django_GS.CRUD_GS.CRUD_GS.wsgi",
        "description": "Django_GS.CRUD_GS.CRUD_GS.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Django_GS.CRUD_GS.CRUD_GS.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Django_GS.CRUD_GS.enroll_app.migrations.0001_initial",
        "description": "Django_GS.CRUD_GS.enroll_app.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "Django_GS.CRUD_GS.enroll_app.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "Django_GS.CRUD_GS.enroll_app.admin",
        "description": "Django_GS.CRUD_GS.enroll_app.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    list_display = ('id', 'name', 'email', 'password')",
        "detail": "Django_GS.CRUD_GS.enroll_app.admin",
        "documentation": {}
    },
    {
        "label": "EnrollAppConfig",
        "kind": 6,
        "importPath": "Django_GS.CRUD_GS.enroll_app.apps",
        "description": "Django_GS.CRUD_GS.enroll_app.apps",
        "peekOfCode": "class EnrollAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'enroll_app'",
        "detail": "Django_GS.CRUD_GS.enroll_app.apps",
        "documentation": {}
    },
    {
        "label": "StudentRegistration",
        "kind": 6,
        "importPath": "Django_GS.CRUD_GS.enroll_app.forms",
        "description": "Django_GS.CRUD_GS.enroll_app.forms",
        "peekOfCode": "class StudentRegistration(forms.ModelForm):\n    class Meta:\n        model = User\n        # fields = ['name', 'email', 'password']\n        fields = '__all__'\n        widgets  = {\n            'name': forms.TextInput(attrs={'class': 'form-control'}),\n            'email': forms.EmailInput(attrs={'class': 'form-control'}),\n            'password': forms.PasswordInput(render_value=True,attrs={'class': 'form-control'}),\n        }",
        "detail": "Django_GS.CRUD_GS.enroll_app.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Django_GS.CRUD_GS.enroll_app.models",
        "description": "Django_GS.CRUD_GS.enroll_app.models",
        "peekOfCode": "class User(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField(max_length=100)\n    password = models.CharField(max_length=50)",
        "detail": "Django_GS.CRUD_GS.enroll_app.models",
        "documentation": {}
    },
    {
        "label": "add_show",
        "kind": 2,
        "importPath": "Django_GS.CRUD_GS.enroll_app.views",
        "description": "Django_GS.CRUD_GS.enroll_app.views",
        "peekOfCode": "def add_show(request):\n    if request.method == 'POST':\n        # \"request.POST\" is very important\n        fm = StudentRegistration(request.POST)\n        if fm.is_valid():\n            # fm.save()\n            nm = fm.cleaned_data['name']\n            em = fm.cleaned_data['email']\n            pw = fm.cleaned_data['password']\n            reg = User(name=nm, email=em, password=pw)",
        "detail": "Django_GS.CRUD_GS.enroll_app.views",
        "documentation": {}
    },
    {
        "label": "delete_data",
        "kind": 2,
        "importPath": "Django_GS.CRUD_GS.enroll_app.views",
        "description": "Django_GS.CRUD_GS.enroll_app.views",
        "peekOfCode": "def delete_data(request, id):\n    if request.method == \"POST\":\n        pi = User.objects.get(pk=id)\n        pi.delete()\n        del_dict = {\n            \"del_msg\": \"Data Deleted Successfully!!\"\n            # \"msg\": f\" {} Deleted Successfully!!\"\n        }\n        \"\"\"request.session['del_msg'] = \"Data Deleted Successfully!!\"\n        return redirect('/')\"\"\"",
        "detail": "Django_GS.CRUD_GS.enroll_app.views",
        "documentation": {}
    },
    {
        "label": "update_data",
        "kind": 2,
        "importPath": "Django_GS.CRUD_GS.enroll_app.views",
        "description": "Django_GS.CRUD_GS.enroll_app.views",
        "peekOfCode": "def update_data(request, id):\n    if request.method == \"POST\":\n        pi = User.objects.get(pk=id)\n        fm = StudentRegistration(request.POST, instance=pi)\n        if fm.is_valid():   # if fm.is_valid:\n            fm.save()\n            fm = StudentRegistration()\n    else:\n        pi = User.objects.get(pk=id)\n        fm = StudentRegistration(instance=pi)",
        "detail": "Django_GS.CRUD_GS.enroll_app.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Django_GS.CRUD_GS.manage",
        "description": "Django_GS.CRUD_GS.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CRUD_GS.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "Django_GS.CRUD_GS.manage",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "Hackathon_code_test.1",
        "description": "Hackathon_code_test.1",
        "peekOfCode": "def speak(text):\n    engine.say(text)\n    engine.runAndWait()\ndef animate_face():\n    cap = cv2.VideoCapture(0)  # Open webcam\n    with mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5) as face_mesh:\n        while cap.isOpened():\n            ret, frame = cap.read()\n            if not ret:\n                break",
        "detail": "Hackathon_code_test.1",
        "documentation": {}
    },
    {
        "label": "animate_face",
        "kind": 2,
        "importPath": "Hackathon_code_test.1",
        "description": "Hackathon_code_test.1",
        "peekOfCode": "def animate_face():\n    cap = cv2.VideoCapture(0)  # Open webcam\n    with mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5) as face_mesh:\n        while cap.isOpened():\n            ret, frame = cap.read()\n            if not ret:\n                break\n            frame = cv2.flip(frame, 1)\n            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n            result = face_mesh.process(rgb_frame)",
        "detail": "Hackathon_code_test.1",
        "documentation": {}
    },
    {
        "label": "mp_face_mesh",
        "kind": 5,
        "importPath": "Hackathon_code_test.1",
        "description": "Hackathon_code_test.1",
        "peekOfCode": "mp_face_mesh = mp.solutions.face_mesh\nmp_drawing = mp.solutions.drawing_utils\n# Initialize Text-to-Speech Engine\nengine = pyttsx3.init()\ndef speak(text):\n    engine.say(text)\n    engine.runAndWait()\ndef animate_face():\n    cap = cv2.VideoCapture(0)  # Open webcam\n    with mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5) as face_mesh:",
        "detail": "Hackathon_code_test.1",
        "documentation": {}
    },
    {
        "label": "mp_drawing",
        "kind": 5,
        "importPath": "Hackathon_code_test.1",
        "description": "Hackathon_code_test.1",
        "peekOfCode": "mp_drawing = mp.solutions.drawing_utils\n# Initialize Text-to-Speech Engine\nengine = pyttsx3.init()\ndef speak(text):\n    engine.say(text)\n    engine.runAndWait()\ndef animate_face():\n    cap = cv2.VideoCapture(0)  # Open webcam\n    with mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5) as face_mesh:\n        while cap.isOpened():",
        "detail": "Hackathon_code_test.1",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Hackathon_code_test.1",
        "description": "Hackathon_code_test.1",
        "peekOfCode": "engine = pyttsx3.init()\ndef speak(text):\n    engine.say(text)\n    engine.runAndWait()\ndef animate_face():\n    cap = cv2.VideoCapture(0)  # Open webcam\n    with mp_face_mesh.FaceMesh(min_detection_confidence=0.5, min_tracking_confidence=0.5) as face_mesh:\n        while cap.isOpened():\n            ret, frame = cap.read()\n            if not ret:",
        "detail": "Hackathon_code_test.1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Matplotlib_practice.Area_Plot",
        "description": "Matplotlib_practice.Area_Plot",
        "peekOfCode": "x = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\nplt.fill_between(x, y1, color='skyblue', alpha=0.5, label='sin(x)')\nplt.fill_between(x, y2, color='lightgreen', alpha=0.5, label='cos(x)')\nplt.title('Basic Area Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.Area_Plot",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "Matplotlib_practice.Area_Plot",
        "description": "Matplotlib_practice.Area_Plot",
        "peekOfCode": "y1 = np.sin(x)\ny2 = np.cos(x)\nplt.fill_between(x, y1, color='skyblue', alpha=0.5, label='sin(x)')\nplt.fill_between(x, y2, color='lightgreen', alpha=0.5, label='cos(x)')\nplt.title('Basic Area Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.Area_Plot",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "Matplotlib_practice.Area_Plot",
        "description": "Matplotlib_practice.Area_Plot",
        "peekOfCode": "y2 = np.cos(x)\nplt.fill_between(x, y1, color='skyblue', alpha=0.5, label='sin(x)')\nplt.fill_between(x, y2, color='lightgreen', alpha=0.5, label='cos(x)')\nplt.title('Basic Area Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.Area_Plot",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Matplotlib_practice.Bar_Plot",
        "description": "Matplotlib_practice.Bar_Plot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\n#plt.bar(products, price)\n#plt.bar(products, price, color='red', width=0.5)\nplt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\n#plt.barh(products, price, color=['r', 'g', 'y'])\nbars = plt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Bar Plot')",
        "detail": "Matplotlib_practice.Bar_Plot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Matplotlib_practice.Bar_Plot",
        "description": "Matplotlib_practice.Bar_Plot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\n#plt.bar(products, price)\n#plt.bar(products, price, color='red', width=0.5)\nplt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\n#plt.barh(products, price, color=['r', 'g', 'y'])\nbars = plt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Bar Plot')\nplt.grid(axis='x', linestyle='--')",
        "detail": "Matplotlib_practice.Bar_Plot",
        "documentation": {}
    },
    {
        "label": "bars",
        "kind": 5,
        "importPath": "Matplotlib_practice.Bar_Plot",
        "description": "Matplotlib_practice.Bar_Plot",
        "peekOfCode": "bars = plt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Bar Plot')\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle=':')\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom', fontsize=15)",
        "detail": "Matplotlib_practice.Bar_Plot",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Matplotlib_practice.Box_Plot",
        "description": "Matplotlib_practice.Box_Plot",
        "peekOfCode": "data = np.random.normal(100, 10, 200)\nplt.boxplot(data)\nplt.title('Basic Box Plot')\nplt.ylabel('Values')\nplt.show()",
        "detail": "Matplotlib_practice.Box_Plot",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Matplotlib_practice.Histogram",
        "description": "Matplotlib_practice.Histogram",
        "peekOfCode": "data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n#plt.hist(data, bins=5, orientation='vertical')\nplt.hist(data, bins=5, orientation='vertical', color='skyblue', edgecolor='black')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Basic Histogram')\nplt.show()",
        "detail": "Matplotlib_practice.Histogram",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Matplotlib_practice.histogram_with_density_plot",
        "description": "Matplotlib_practice.histogram_with_density_plot",
        "peekOfCode": "data = np.random.randn(10000)\n# Create histogram with density plot\nplt.hist(data, bins=30, density=True, alpha=0.6, color='g')\n# Add density plot\ndensity = np.linspace(min(data), max(data), 100)\nplt.plot(density, 1/(np.sqrt(2 * np.pi)) * np.exp(-0.5 * density**2), color='r')\nplt.xlabel('Value')\nplt.ylabel('Density')\nplt.title('Histogram with Density Plot')\nplt.show()",
        "detail": "Matplotlib_practice.histogram_with_density_plot",
        "documentation": {}
    },
    {
        "label": "density",
        "kind": 5,
        "importPath": "Matplotlib_practice.histogram_with_density_plot",
        "description": "Matplotlib_practice.histogram_with_density_plot",
        "peekOfCode": "density = np.linspace(min(data), max(data), 100)\nplt.plot(density, 1/(np.sqrt(2 * np.pi)) * np.exp(-0.5 * density**2), color='r')\nplt.xlabel('Value')\nplt.ylabel('Density')\nplt.title('Histogram with Density Plot')\nplt.show()",
        "detail": "Matplotlib_practice.histogram_with_density_plot",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Matplotlib_practice.Line_Plot",
        "description": "Matplotlib_practice.Line_Plot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nplt.plot(products, price)\nplt.plot(products, price, color='red', linestyle='--', linewidth=2)\nplt.plot(products, price, marker='o', markersize=20, markerfacecolor='red')\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Line Plot')\nplt.grid(True)\nplt.grid(color='gray', linestyle=':')",
        "detail": "Matplotlib_practice.Line_Plot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Matplotlib_practice.Line_Plot",
        "description": "Matplotlib_practice.Line_Plot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nplt.plot(products, price)\nplt.plot(products, price, color='red', linestyle='--', linewidth=2)\nplt.plot(products, price, marker='o', markersize=20, markerfacecolor='red')\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Line Plot')\nplt.grid(True)\nplt.grid(color='gray', linestyle=':')\nplt.show()",
        "detail": "Matplotlib_practice.Line_Plot",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Matplotlib_practice.multiple_bars",
        "description": "Matplotlib_practice.multiple_bars",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nwidth=0.3\nproducts_index = np.arange(len(products))\nproducts_index_set = [j+width for j in products_index]\nplt.bar(products_index, price, color='red', width=width, label='Price')\nplt.bar(products_index_set, quantity, color='blue', width=width, label='Quantity')\nplt.xticks(products_index+width/2, products, rotation=20)\nplt.legend()",
        "detail": "Matplotlib_practice.multiple_bars",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Matplotlib_practice.multiple_bars",
        "description": "Matplotlib_practice.multiple_bars",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nwidth=0.3\nproducts_index = np.arange(len(products))\nproducts_index_set = [j+width for j in products_index]\nplt.bar(products_index, price, color='red', width=width, label='Price')\nplt.bar(products_index_set, quantity, color='blue', width=width, label='Quantity')\nplt.xticks(products_index+width/2, products, rotation=20)\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.multiple_bars",
        "documentation": {}
    },
    {
        "label": "products_index",
        "kind": 5,
        "importPath": "Matplotlib_practice.multiple_bars",
        "description": "Matplotlib_practice.multiple_bars",
        "peekOfCode": "products_index = np.arange(len(products))\nproducts_index_set = [j+width for j in products_index]\nplt.bar(products_index, price, color='red', width=width, label='Price')\nplt.bar(products_index_set, quantity, color='blue', width=width, label='Quantity')\nplt.xticks(products_index+width/2, products, rotation=20)\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.multiple_bars",
        "documentation": {}
    },
    {
        "label": "products_index_set",
        "kind": 5,
        "importPath": "Matplotlib_practice.multiple_bars",
        "description": "Matplotlib_practice.multiple_bars",
        "peekOfCode": "products_index_set = [j+width for j in products_index]\nplt.bar(products_index, price, color='red', width=width, label='Price')\nplt.bar(products_index_set, quantity, color='blue', width=width, label='Quantity')\nplt.xticks(products_index+width/2, products, rotation=20)\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.multiple_bars",
        "documentation": {}
    },
    {
        "label": "data1",
        "kind": 5,
        "importPath": "Matplotlib_practice.Multiple_Histograms",
        "description": "Matplotlib_practice.Multiple_Histograms",
        "peekOfCode": "data1 = np.random.randn(1000)\ndata2 = np.random.randn(1000) + 2\nplt.hist(data1, bins=30, alpha=0.5, label='Data 1')\nplt.hist(data2, bins=30, alpha=0.5, label='Data 2')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Multiple Histograms')\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.Multiple_Histograms",
        "documentation": {}
    },
    {
        "label": "data2",
        "kind": 5,
        "importPath": "Matplotlib_practice.Multiple_Histograms",
        "description": "Matplotlib_practice.Multiple_Histograms",
        "peekOfCode": "data2 = np.random.randn(1000) + 2\nplt.hist(data1, bins=30, alpha=0.5, label='Data 1')\nplt.hist(data2, bins=30, alpha=0.5, label='Data 2')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Multiple Histograms')\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.Multiple_Histograms",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Matplotlib_practice.Multiple_Line_Plot",
        "description": "Matplotlib_practice.Multiple_Line_Plot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.plot(products, price, label='Price')\nplt.plot(products, quantity, label='Quantity', linestyle='--')\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.Multiple_Line_Plot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Matplotlib_practice.Multiple_Line_Plot",
        "description": "Matplotlib_practice.Multiple_Line_Plot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.plot(products, price, label='Price')\nplt.plot(products, quantity, label='Quantity', linestyle='--')\nplt.legend()\nplt.show()",
        "detail": "Matplotlib_practice.Multiple_Line_Plot",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "Matplotlib_practice.Multiple_Scatter_Plot",
        "description": "Matplotlib_practice.Multiple_Scatter_Plot",
        "peekOfCode": "x1 = [1, 2, 3, 4, 5]\ny1 = [10, 15, 13, 17, 20]\nx2 = [1, 2, 3, 4, 5]\ny2 = [20, 25, 23, 27, 30]\nplt.scatter(x1, y1, color='blue', label='Group 1')\nplt.scatter(x2, y2, color='red', label='Group 2')\nplt.legend()\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Multiple Scatter Plots')",
        "detail": "Matplotlib_practice.Multiple_Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "Matplotlib_practice.Multiple_Scatter_Plot",
        "description": "Matplotlib_practice.Multiple_Scatter_Plot",
        "peekOfCode": "y1 = [10, 15, 13, 17, 20]\nx2 = [1, 2, 3, 4, 5]\ny2 = [20, 25, 23, 27, 30]\nplt.scatter(x1, y1, color='blue', label='Group 1')\nplt.scatter(x2, y2, color='red', label='Group 2')\nplt.legend()\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Multiple Scatter Plots')\nplt.show()",
        "detail": "Matplotlib_practice.Multiple_Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "Matplotlib_practice.Multiple_Scatter_Plot",
        "description": "Matplotlib_practice.Multiple_Scatter_Plot",
        "peekOfCode": "x2 = [1, 2, 3, 4, 5]\ny2 = [20, 25, 23, 27, 30]\nplt.scatter(x1, y1, color='blue', label='Group 1')\nplt.scatter(x2, y2, color='red', label='Group 2')\nplt.legend()\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Multiple Scatter Plots')\nplt.show()",
        "detail": "Matplotlib_practice.Multiple_Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "Matplotlib_practice.Multiple_Scatter_Plot",
        "description": "Matplotlib_practice.Multiple_Scatter_Plot",
        "peekOfCode": "y2 = [20, 25, 23, 27, 30]\nplt.scatter(x1, y1, color='blue', label='Group 1')\nplt.scatter(x2, y2, color='red', label='Group 2')\nplt.legend()\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Multiple Scatter Plots')\nplt.show()",
        "detail": "Matplotlib_practice.Multiple_Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "Matplotlib_practice.Pie_Chart",
        "description": "Matplotlib_practice.Pie_Chart",
        "peekOfCode": "labels = ['Mouse', 'Keyboard', 'Laptop', 'Mobile', 'Headphone']\nsizes = [30, 60, 40, 80, 90]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen']\nexplode = (0, 0.1, 0, 0, 0)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\nplt.title('Basic Pie Chart')\nplt.axis('equal')\nplt.legend(labels, loc='upper right')\nplt.show()",
        "detail": "Matplotlib_practice.Pie_Chart",
        "documentation": {}
    },
    {
        "label": "sizes",
        "kind": 5,
        "importPath": "Matplotlib_practice.Pie_Chart",
        "description": "Matplotlib_practice.Pie_Chart",
        "peekOfCode": "sizes = [30, 60, 40, 80, 90]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen']\nexplode = (0, 0.1, 0, 0, 0)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\nplt.title('Basic Pie Chart')\nplt.axis('equal')\nplt.legend(labels, loc='upper right')\nplt.show()",
        "detail": "Matplotlib_practice.Pie_Chart",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "Matplotlib_practice.Pie_Chart",
        "description": "Matplotlib_practice.Pie_Chart",
        "peekOfCode": "colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen']\nexplode = (0, 0.1, 0, 0, 0)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\nplt.title('Basic Pie Chart')\nplt.axis('equal')\nplt.legend(labels, loc='upper right')\nplt.show()",
        "detail": "Matplotlib_practice.Pie_Chart",
        "documentation": {}
    },
    {
        "label": "explode",
        "kind": 5,
        "importPath": "Matplotlib_practice.Pie_Chart",
        "description": "Matplotlib_practice.Pie_Chart",
        "peekOfCode": "explode = (0, 0.1, 0, 0, 0)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\nplt.title('Basic Pie Chart')\nplt.axis('equal')\nplt.legend(labels, loc='upper right')\nplt.show()",
        "detail": "Matplotlib_practice.Pie_Chart",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Matplotlib_practice.Saving_Figures",
        "description": "Matplotlib_practice.Saving_Figures",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.plot(products, price, label='Price')\nplt.plot(products, quantity, label='Quantity', linestyle='--')\nplt.legend()\nplt.savefig('1stplot.png')\nplt.show()",
        "detail": "Matplotlib_practice.Saving_Figures",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Matplotlib_practice.Saving_Figures",
        "description": "Matplotlib_practice.Saving_Figures",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.plot(products, price, label='Price')\nplt.plot(products, quantity, label='Quantity', linestyle='--')\nplt.legend()\nplt.savefig('1stplot.png')\nplt.show()",
        "detail": "Matplotlib_practice.Saving_Figures",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Matplotlib_practice.Scatter_Plot",
        "description": "Matplotlib_practice.Scatter_Plot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\n#plt.scatter(products, price)\nsizes = [20, 50, 80, 200, 500]  # Marker sizes\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta']  # Marker colors\nplt.scatter(products, price, s=sizes, c=colors)\n# Annotate specific points\nfor i, txt in enumerate(['A', 'B', 'C', 'D', 'E']):\n    plt.annotate(txt, (products[i], price[i]))\nplt.show()",
        "detail": "Matplotlib_practice.Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Matplotlib_practice.Scatter_Plot",
        "description": "Matplotlib_practice.Scatter_Plot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\n#plt.scatter(products, price)\nsizes = [20, 50, 80, 200, 500]  # Marker sizes\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta']  # Marker colors\nplt.scatter(products, price, s=sizes, c=colors)\n# Annotate specific points\nfor i, txt in enumerate(['A', 'B', 'C', 'D', 'E']):\n    plt.annotate(txt, (products[i], price[i]))\nplt.show()",
        "detail": "Matplotlib_practice.Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "sizes",
        "kind": 5,
        "importPath": "Matplotlib_practice.Scatter_Plot",
        "description": "Matplotlib_practice.Scatter_Plot",
        "peekOfCode": "sizes = [20, 50, 80, 200, 500]  # Marker sizes\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta']  # Marker colors\nplt.scatter(products, price, s=sizes, c=colors)\n# Annotate specific points\nfor i, txt in enumerate(['A', 'B', 'C', 'D', 'E']):\n    plt.annotate(txt, (products[i], price[i]))\nplt.show()",
        "detail": "Matplotlib_practice.Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "Matplotlib_practice.Scatter_Plot",
        "description": "Matplotlib_practice.Scatter_Plot",
        "peekOfCode": "colors = ['red', 'green', 'blue', 'cyan', 'magenta']  # Marker colors\nplt.scatter(products, price, s=sizes, c=colors)\n# Annotate specific points\nfor i, txt in enumerate(['A', 'B', 'C', 'D', 'E']):\n    plt.annotate(txt, (products[i], price[i]))\nplt.show()",
        "detail": "Matplotlib_practice.Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Matplotlib_practice.Stem_Plot",
        "description": "Matplotlib_practice.Stem_Plot",
        "peekOfCode": "x = np.linspace(0.1, 2 * np.pi, 10)\ny = np.sin(x)\nplt.stem(x, y, linefmt='--')\nplt.title('Basic Stem Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()",
        "detail": "Matplotlib_practice.Stem_Plot",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Matplotlib_practice.Stem_Plot",
        "description": "Matplotlib_practice.Stem_Plot",
        "peekOfCode": "y = np.sin(x)\nplt.stem(x, y, linefmt='--')\nplt.title('Basic Stem Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()",
        "detail": "Matplotlib_practice.Stem_Plot",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Matplotlib_practice.Step_Plot",
        "description": "Matplotlib_practice.Step_Plot",
        "peekOfCode": "x = np.linspace(0, 10, 11)\ny = np.sin(x)\nplt.step(x, y, where='mid', linestyle='--', color='g')\nplt.fill_between(x, y, step='mid', alpha=0.2)\nplt.title('Basic Step Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()",
        "detail": "Matplotlib_practice.Step_Plot",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Matplotlib_practice.Step_Plot",
        "description": "Matplotlib_practice.Step_Plot",
        "peekOfCode": "y = np.sin(x)\nplt.step(x, y, where='mid', linestyle='--', color='g')\nplt.fill_between(x, y, step='mid', alpha=0.2)\nplt.title('Basic Step Plot')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()",
        "detail": "Matplotlib_practice.Step_Plot",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Matplotlib_practice.Subplot",
        "description": "Matplotlib_practice.Subplot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.subplot(2, 1, 1)  #(rows, columns, index) - first subplot\nplt.plot(products, price, label='Price')\nplt.title('Price')\nplt.subplot(2, 1, 2)  #(rows, columns, index) - second subplot\nplt.plot(products, quantity, label='Quantity')\nplt.title('Quantity')\nplt.tight_layout()",
        "detail": "Matplotlib_practice.Subplot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Matplotlib_practice.Subplot",
        "description": "Matplotlib_practice.Subplot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.subplot(2, 1, 1)  #(rows, columns, index) - first subplot\nplt.plot(products, price, label='Price')\nplt.title('Price')\nplt.subplot(2, 1, 2)  #(rows, columns, index) - second subplot\nplt.plot(products, quantity, label='Quantity')\nplt.title('Quantity')\nplt.tight_layout()\nplt.show()",
        "detail": "Matplotlib_practice.Subplot",
        "documentation": {}
    },
    {
        "label": "arr0",
        "kind": 5,
        "importPath": "Numpy.intro",
        "description": "Numpy.intro",
        "peekOfCode": "arr0 = np.array(7)\narr1 = np.array([2,4,6,8])\narr2 = np.array([[1,2,3],[4,5,6]])\narr3 = np.array([[1,2,3],[4,5,6]])\n# arr = np.array([2,4,6,8,100] , np.int8)\n# Creating an array from tuple\narr = np.array((1, 3, 2))\nprint(\"\\nArray created using \"\"passed tuple:\\n\", arr) \nprint(arr0.dtype)\nprint(arr1)",
        "detail": "Numpy.intro",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "Numpy.intro",
        "description": "Numpy.intro",
        "peekOfCode": "arr1 = np.array([2,4,6,8])\narr2 = np.array([[1,2,3],[4,5,6]])\narr3 = np.array([[1,2,3],[4,5,6]])\n# arr = np.array([2,4,6,8,100] , np.int8)\n# Creating an array from tuple\narr = np.array((1, 3, 2))\nprint(\"\\nArray created using \"\"passed tuple:\\n\", arr) \nprint(arr0.dtype)\nprint(arr1)\nprint(arr2)",
        "detail": "Numpy.intro",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "Numpy.intro",
        "description": "Numpy.intro",
        "peekOfCode": "arr2 = np.array([[1,2,3],[4,5,6]])\narr3 = np.array([[1,2,3],[4,5,6]])\n# arr = np.array([2,4,6,8,100] , np.int8)\n# Creating an array from tuple\narr = np.array((1, 3, 2))\nprint(\"\\nArray created using \"\"passed tuple:\\n\", arr) \nprint(arr0.dtype)\nprint(arr1)\nprint(arr2)\nprint(arr3.dtype)",
        "detail": "Numpy.intro",
        "documentation": {}
    },
    {
        "label": "arr3",
        "kind": 5,
        "importPath": "Numpy.intro",
        "description": "Numpy.intro",
        "peekOfCode": "arr3 = np.array([[1,2,3],[4,5,6]])\n# arr = np.array([2,4,6,8,100] , np.int8)\n# Creating an array from tuple\narr = np.array((1, 3, 2))\nprint(\"\\nArray created using \"\"passed tuple:\\n\", arr) \nprint(arr0.dtype)\nprint(arr1)\nprint(arr2)\nprint(arr3.dtype)",
        "detail": "Numpy.intro",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "Numpy.intro",
        "description": "Numpy.intro",
        "peekOfCode": "arr = np.array((1, 3, 2))\nprint(\"\\nArray created using \"\"passed tuple:\\n\", arr) \nprint(arr0.dtype)\nprint(arr1)\nprint(arr2)\nprint(arr3.dtype)",
        "detail": "Numpy.intro",
        "documentation": {}
    },
    {
        "label": "tup",
        "kind": 5,
        "importPath": "Numpy.intro2",
        "description": "Numpy.intro2",
        "peekOfCode": "tup = np.array((1, 2, 3, 4, 5))\ndict = np.array({1: 2, 3: 4, 5: 6})\ns = np.array({1, 2, 3, 4})\nst=np.array((\"Aakash\",))\nprint(tup)\nprint(type(dict))\nprint(s)\nprint(st)\nprint(type(st))",
        "detail": "Numpy.intro2",
        "documentation": {}
    },
    {
        "label": "dict",
        "kind": 5,
        "importPath": "Numpy.intro2",
        "description": "Numpy.intro2",
        "peekOfCode": "dict = np.array({1: 2, 3: 4, 5: 6})\ns = np.array({1, 2, 3, 4})\nst=np.array((\"Aakash\",))\nprint(tup)\nprint(type(dict))\nprint(s)\nprint(st)\nprint(type(st))",
        "detail": "Numpy.intro2",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Numpy.intro2",
        "description": "Numpy.intro2",
        "peekOfCode": "s = np.array({1, 2, 3, 4})\nst=np.array((\"Aakash\",))\nprint(tup)\nprint(type(dict))\nprint(s)\nprint(st)\nprint(type(st))",
        "detail": "Numpy.intro2",
        "documentation": {}
    },
    {
        "label": "df1",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "df1 = pd.DataFrame({\n    'id': [1, 2, 3, 4],\n    'name': ['Sonam', 'Raj', 'Sonal', 'Rajeev']\n})\ndf2 = pd.DataFrame({\n    'id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})\n\"\"\" Inner Join\"\"\" \ninner_join = pd.merge(df1, df2, on='id')",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "df2 = pd.DataFrame({\n    'id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})\n\"\"\" Inner Join\"\"\" \ninner_join = pd.merge(df1, df2, on='id')\nprint(\"Inner Join:\\n\", inner_join)\n\"\"\" Left Join\"\"\" \nleft_join = pd.merge(df1, df2, on='id', how='left')\nprint(\"\\nLeft Join:\\n\", left_join)",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "inner_join",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "inner_join = pd.merge(df1, df2, on='id')\nprint(\"Inner Join:\\n\", inner_join)\n\"\"\" Left Join\"\"\" \nleft_join = pd.merge(df1, df2, on='id', how='left')\nprint(\"\\nLeft Join:\\n\", left_join)\n\"\"\" Right Join\"\"\" \nright_join = pd.merge(df1, df2, on='id', how='right')\nprint(\"\\nRight Join:\\n\", right_join)\n\"\"\" Outer Join\"\"\" \nouter_join = pd.merge(df1, df2, on='id', how='outer')",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "left_join",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "left_join = pd.merge(df1, df2, on='id', how='left')\nprint(\"\\nLeft Join:\\n\", left_join)\n\"\"\" Right Join\"\"\" \nright_join = pd.merge(df1, df2, on='id', how='right')\nprint(\"\\nRight Join:\\n\", right_join)\n\"\"\" Outer Join\"\"\" \nouter_join = pd.merge(df1, df2, on='id', how='outer')\nprint(\"\\nOuter Join:\\n\", outer_join)\ndf3 = pd.DataFrame({\n    'id': [1, 2, 3, 4],",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "right_join",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "right_join = pd.merge(df1, df2, on='id', how='right')\nprint(\"\\nRight Join:\\n\", right_join)\n\"\"\" Outer Join\"\"\" \nouter_join = pd.merge(df1, df2, on='id', how='outer')\nprint(\"\\nOuter Join:\\n\", outer_join)\ndf3 = pd.DataFrame({\n    'id': [1, 2, 3, 4],\n    'name': ['Sonam', 'Raj', 'Sonal', 'Rajeev']\n})\ndf4 = pd.DataFrame({",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "outer_join",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "outer_join = pd.merge(df1, df2, on='id', how='outer')\nprint(\"\\nOuter Join:\\n\", outer_join)\ndf3 = pd.DataFrame({\n    'id': [1, 2, 3, 4],\n    'name': ['Sonam', 'Raj', 'Sonal', 'Rajeev']\n})\ndf4 = pd.DataFrame({\n    'stu_id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "df3",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "df3 = pd.DataFrame({\n    'id': [1, 2, 3, 4],\n    'name': ['Sonam', 'Raj', 'Sonal', 'Rajeev']\n})\ndf4 = pd.DataFrame({\n    'stu_id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})\n\"\"\" Inner Join\"\"\" \ninner_join = pd.merge(df3, df4, left_on='id', right_on='stu_id')",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "df4",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "df4 = pd.DataFrame({\n    'stu_id': [3, 4, 5, 6],\n    'score': [90, 80, 70, 60]\n})\n\"\"\" Inner Join\"\"\" \ninner_join = pd.merge(df3, df4, left_on='id', right_on='stu_id')\nprint(\"Inner Join:\\n\", inner_join)",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "inner_join",
        "kind": 5,
        "importPath": "Pandas_Practise..vscode.Merge",
        "description": "Pandas_Practise..vscode.Merge",
        "peekOfCode": "inner_join = pd.merge(df3, df4, left_on='id', right_on='stu_id')\nprint(\"Inner Join:\\n\", inner_join)",
        "detail": "Pandas_Practise..vscode.Merge",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "description": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'city': ['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'age': [28, 24, 24, np.nan],\n}\ndf = pd.DataFrame(data)\n# Writing DataFrame to CSV file\n# df.to_csv('Import_and_Export_File/sample.csv', index=False)  # Without index\n# Reading the CSV file back into a DataFrame\ndf_read = pd.read_csv('Import_and_Export_File/sample.csv')",
        "detail": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "description": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "peekOfCode": "df = pd.DataFrame(data)\n# Writing DataFrame to CSV file\n# df.to_csv('Import_and_Export_File/sample.csv', index=False)  # Without index\n# Reading the CSV file back into a DataFrame\ndf_read = pd.read_csv('Import_and_Export_File/sample.csv')\nprint(df_read)",
        "detail": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "documentation": {}
    },
    {
        "label": "df_read",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "description": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "peekOfCode": "df_read = pd.read_csv('Import_and_Export_File/sample.csv')\nprint(df_read)",
        "detail": "Pandas_Practise.Import_and_Export_File.CSV_File",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "description": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'city': ['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'age': [28, 24, 24, np.nan],\n}\ndf = pd.DataFrame(data)\n# Writing DataFrame to Excel file\ndf.to_excel('Import_and_Export_File/sample.xlsx', index=False)  # Without index\n# Reading the Excel file back into a DataFrame\ndf_read = pd.read_excel('Import_and_Export_File/sample.xlsx')",
        "detail": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "description": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "peekOfCode": "df = pd.DataFrame(data)\n# Writing DataFrame to Excel file\ndf.to_excel('Import_and_Export_File/sample.xlsx', index=False)  # Without index\n# Reading the Excel file back into a DataFrame\ndf_read = pd.read_excel('Import_and_Export_File/sample.xlsx')\nprint(df_read)",
        "detail": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "documentation": {}
    },
    {
        "label": "df_read",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "description": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "peekOfCode": "df_read = pd.read_excel('Import_and_Export_File/sample.xlsx')\nprint(df_read)",
        "detail": "Pandas_Practise.Import_and_Export_File.Excel_File",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "description": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'city': ['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'age': [28, 24, 24, np.nan],\n}\ndf = pd.DataFrame(data)\n# Write DataFrame to JSON string\njson_str = df.to_json(\"Import_and_Export_File/data.json\",index=False)\n# Reading the JSON file back into a DataFrame\ndf_read = pd.read_json('Import_and_Export_File/data.json')",
        "detail": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "description": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "peekOfCode": "df = pd.DataFrame(data)\n# Write DataFrame to JSON string\njson_str = df.to_json(\"Import_and_Export_File/data.json\",index=False)\n# Reading the JSON file back into a DataFrame\ndf_read = pd.read_json('Import_and_Export_File/data.json')\nprint(df_read)",
        "detail": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "documentation": {}
    },
    {
        "label": "json_str",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "description": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "peekOfCode": "json_str = df.to_json(\"Import_and_Export_File/data.json\",index=False)\n# Reading the JSON file back into a DataFrame\ndf_read = pd.read_json('Import_and_Export_File/data.json')\nprint(df_read)",
        "detail": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "documentation": {}
    },
    {
        "label": "df_read",
        "kind": 5,
        "importPath": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "description": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "peekOfCode": "df_read = pd.read_json('Import_and_Export_File/data.json')\nprint(df_read)",
        "detail": "Pandas_Practise.Import_and_Export_File.JSON_File",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Deletion",
        "description": "Pandas_Practise.Column_Deletion",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Pandas_Practise.Column_Deletion",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Deletion",
        "description": "Pandas_Practise.Column_Deletion",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\"Delete single Column\"\"\"\n#del df['gender']\n#print(\"\\nGender Column Deleted:\\n\", df)\n\"\"\"Pop single column \"\"\"\n# print(\"\\nPOP City:\\n\", df.pop('city'))\n# print(\"\\nData after POP City:\\n\", df)\n##print(\"\\nTypeError: DataFrame.pop() missing 1 required positional argument: 'item' \\n\", df.pop())\n\"\"\"Delete Multiple column drop() which returns the data after deletion",
        "detail": "Pandas_Practise.Column_Deletion",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Insertion",
        "description": "Pandas_Practise.Column_Insertion",
        "peekOfCode": "data = {\n    'name':['Aakash','Shivam','Ajay','Ajay','Rohan','Mohan',np.nan ],\n    'age':[ 24,20,22,np.nan,21,np.nan,20 ],\n    'City': ['Noida', 'Delhi', 'Mumbai', 'Pune','Goa','Patna','Lucknow']\n    }\ndf = pd.DataFrame(data)\n# print(\"Display all Data : \\n\",df)\n# df[\"Result\"] = \"pass\"\n# print(\"After Insertion of Column at the End : \\n\",df)\n# df[\"marks\"] = [95,98,69,96,56,85,33]",
        "detail": "Pandas_Practise.Column_Insertion",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Insertion",
        "description": "Pandas_Practise.Column_Insertion",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display all Data : \\n\",df)\n# df[\"Result\"] = \"pass\"\n# print(\"After Insertion of Column at the End : \\n\",df)\n# df[\"marks\"] = [95,98,69,96,56,85,33]\n# print(\"After Insertion of Array Marks-Column : \\n\",df)\n# \"\"\"insert() - It is used to insert column at particular location \"\"\"\n# hobbies = [\"Football\", \"Cricket\", \"reading\", \"singing\", \"chatting\", \"computer\", \"fighting\",]\n# df.insert(2, \"hobbies\", hobbies)\n# print(\"Insert Column at index 2 :\\n\", df)",
        "detail": "Pandas_Practise.Column_Insertion",
        "documentation": {}
    },
    {
        "label": "df[\"fees\"]",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Insertion",
        "description": "Pandas_Practise.Column_Insertion",
        "peekOfCode": "df[\"fees\"] = df[\"age\"] * 12\nprint(\"\\n Fees Column Added:\\n\", df)",
        "detail": "Pandas_Practise.Column_Insertion",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Selection",
        "description": "Pandas_Practise.Column_Selection",
        "peekOfCode": "data = {\n    'name':['Aakash','Shivam','Ajay','Ajay','Rohan','Mohan',np.nan ],\n    'age':[ 24,20,22,np.nan,21,np.nan,20 ],\n    'City': ['Noida', 'Delhi', 'Mumbai', 'Pune','Goa','Patna','Lucknow']\n    }\ndf = pd.DataFrame(data)\n# print(\"Display all Data : \\n\",df)\n# print(\"\\nSingle Column Data : \\n\",df[\"age\"])\n# print(\"\\n Sum of Single Column Data : \\n\",df[\"age\"].sum())\n# print(\"\\n Empty DataFrame : \\n\",df[[]])",
        "detail": "Pandas_Practise.Column_Selection",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Selection",
        "description": "Pandas_Practise.Column_Selection",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display all Data : \\n\",df)\n# print(\"\\nSingle Column Data : \\n\",df[\"age\"])\n# print(\"\\n Sum of Single Column Data : \\n\",df[\"age\"].sum())\n# print(\"\\n Empty DataFrame : \\n\",df[[]])\n# print(\"\\nMultiple Column Data : \\n\",df[[\"age\" , \"name\",\"City\"]])\n## print(\"\\n Empty DataFrame : \\n\",df[])\n# print(\"\\nSelect Row by integer Location : \\n\",df.iloc[2])\n# print(\"\\nSelect Row by Label : \\n\",df.loc[2])\nprint(\"\\nSlice Row : \\n\",df[2:5])",
        "detail": "Pandas_Practise.Column_Selection",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Updation",
        "description": "Pandas_Practise.Column_Updation",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'Rohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)",
        "detail": "Pandas_Practise.Column_Updation",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Column_Updation",
        "description": "Pandas_Practise.Column_Updation",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n# # Update all fields of a column\n# df[\"gender\"] = \"F\"\n# print(\"\\nUpdate Gender Column:\\n\", df)\n# # Update specific field of a column\n# df.loc[df['roll'] == 102, 'marks'] = 999\n# print(\"\\nUpdate 'All' roll no.102  marks :\\n\", df)\n# Replace Values\nprint(\"\\n Replace 'All' Values:\\n\", df.replace('Madhubani', 'Delhi'))",
        "detail": "Pandas_Practise.Column_Updation",
        "documentation": {}
    },
    {
        "label": "df1",
        "kind": 5,
        "importPath": "Pandas_Practise.Concat",
        "description": "Pandas_Practise.Concat",
        "peekOfCode": "df1 = pd.DataFrame({\n    'A': ['A0', 'A1', 'A2', 'A3'],\n    'B': ['B0', 'B1', 'B2', 'B3']\n})\ndf2 = pd.DataFrame({\n    'A': ['A4', 'A5', 'A6', 'A7'],\n    'B': ['B4', 'B5', 'B6', 'B7']\n})\ndf3 = pd.DataFrame({\n    'C': ['C0', 'C1', 'C2', 'C3'],",
        "detail": "Pandas_Practise.Concat",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "Pandas_Practise.Concat",
        "description": "Pandas_Practise.Concat",
        "peekOfCode": "df2 = pd.DataFrame({\n    'A': ['A4', 'A5', 'A6', 'A7'],\n    'B': ['B4', 'B5', 'B6', 'B7']\n})\ndf3 = pd.DataFrame({\n    'C': ['C0', 'C1', 'C2', 'C3'],\n    'D': ['D0', 'D1', 'D2', 'D3']\n})\n\"\"\"Vertical Concatenation\"\"\"\nvertical_concat = pd.concat([df1, df2])",
        "detail": "Pandas_Practise.Concat",
        "documentation": {}
    },
    {
        "label": "df3",
        "kind": 5,
        "importPath": "Pandas_Practise.Concat",
        "description": "Pandas_Practise.Concat",
        "peekOfCode": "df3 = pd.DataFrame({\n    'C': ['C0', 'C1', 'C2', 'C3'],\n    'D': ['D0', 'D1', 'D2', 'D3']\n})\n\"\"\"Vertical Concatenation\"\"\"\nvertical_concat = pd.concat([df1, df2])\nprint(\"Vertical Concatenation:\\n\", vertical_concat)\n\"\"\"Horizontal Concatenation\"\"\"\nhorizontal_concat = pd.concat([df1, df2], axis=1)\nprint(\"\\nHorizontal Concatenation:\\n\", horizontal_concat)",
        "detail": "Pandas_Practise.Concat",
        "documentation": {}
    },
    {
        "label": "vertical_concat",
        "kind": 5,
        "importPath": "Pandas_Practise.Concat",
        "description": "Pandas_Practise.Concat",
        "peekOfCode": "vertical_concat = pd.concat([df1, df2])\nprint(\"Vertical Concatenation:\\n\", vertical_concat)\n\"\"\"Horizontal Concatenation\"\"\"\nhorizontal_concat = pd.concat([df1, df2], axis=1)\nprint(\"\\nHorizontal Concatenation:\\n\", horizontal_concat)\n\"\"\"Concatenation with Different Columns\"\"\"\ndifferent_columns_concat = pd.concat([df1, df3], axis=1)\nprint(\"\\nConcatenation with Different Columns:\\n\", different_columns_concat)",
        "detail": "Pandas_Practise.Concat",
        "documentation": {}
    },
    {
        "label": "horizontal_concat",
        "kind": 5,
        "importPath": "Pandas_Practise.Concat",
        "description": "Pandas_Practise.Concat",
        "peekOfCode": "horizontal_concat = pd.concat([df1, df2], axis=1)\nprint(\"\\nHorizontal Concatenation:\\n\", horizontal_concat)\n\"\"\"Concatenation with Different Columns\"\"\"\ndifferent_columns_concat = pd.concat([df1, df3], axis=1)\nprint(\"\\nConcatenation with Different Columns:\\n\", different_columns_concat)",
        "detail": "Pandas_Practise.Concat",
        "documentation": {}
    },
    {
        "label": "different_columns_concat",
        "kind": 5,
        "importPath": "Pandas_Practise.Concat",
        "description": "Pandas_Practise.Concat",
        "peekOfCode": "different_columns_concat = pd.concat([df1, df3], axis=1)\nprint(\"\\nConcatenation with Different Columns:\\n\", different_columns_concat)",
        "detail": "Pandas_Practise.Concat",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Data_Inspection",
        "description": "Pandas_Practise.Data_Inspection",
        "peekOfCode": "data = {\n    'name':['Aakash','Shivam','Ajay','Ajay','Rohan','Mohan',np.nan ],\n    'age':[ 24,20,22,np.nan,21,np.nan,20 ]\n}\ndf = pd.DataFrame(data)\n# print(df)\n# print(\"Info :\\n\", df.info)\n# print(\"null Info :\\n\", df.isnull())\n# print(\"total null Info :\\n\", df.isnull().sum())\n# print(\"Statistical summary : \",df.describe())",
        "detail": "Pandas_Practise.Data_Inspection",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Data_Inspection",
        "description": "Pandas_Practise.Data_Inspection",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(df)\n# print(\"Info :\\n\", df.info)\n# print(\"null Info :\\n\", df.isnull())\n# print(\"total null Info :\\n\", df.isnull().sum())\n# print(\"Statistical summary : \",df.describe())\n# print(\"Top 5 data : \",df.head())\n# print(\"Top 10 data : \",df.head(10))\n# print(\"Bottom 5 data : \",df.tail())\n# print(\"Bottom 10 data : \",df.tail(10))",
        "detail": "Pandas_Practise.Data_Inspection",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Filter",
        "description": "Pandas_Practise.Filter",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Pandas_Practise.Filter",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Filter",
        "description": "Pandas_Practise.Filter",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\"  isin([....])  \"\"\"\ndt1 = df['age'].isin([28, 32])\nprint(dt1)\ndt2 = df[df['age'].isin([28, 32])]\nprint(dt2)",
        "detail": "Pandas_Practise.Filter",
        "documentation": {}
    },
    {
        "label": "dt1",
        "kind": 5,
        "importPath": "Pandas_Practise.Filter",
        "description": "Pandas_Practise.Filter",
        "peekOfCode": "dt1 = df['age'].isin([28, 32])\nprint(dt1)\ndt2 = df[df['age'].isin([28, 32])]\nprint(dt2)",
        "detail": "Pandas_Practise.Filter",
        "documentation": {}
    },
    {
        "label": "dt2",
        "kind": 5,
        "importPath": "Pandas_Practise.Filter",
        "description": "Pandas_Practise.Filter",
        "peekOfCode": "dt2 = df[df['age'].isin([28, 32])]\nprint(dt2)",
        "detail": "Pandas_Practise.Filter",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Grouping",
        "description": "Pandas_Practise.Grouping",
        "peekOfCode": "data = {\n    'team': ['A', 'A', 'B', 'B', 'C', 'C'],\n    'player': ['X', 'Y', 'X', 'Y', 'X', 'Y'],\n    'points': [10, 15, 10, 20, 10, 25]\n}\ndf = pd.DataFrame(data)\n\"\"\" Display the DataFrame\"\"\"\nprint(\"Original DataFrame:\\n\", df)\n\"\"\" Group by 'team' and calculate the sum of 'points'\"\"\"\ngrouped_sum = df.groupby('team').sum()",
        "detail": "Pandas_Practise.Grouping",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Grouping",
        "description": "Pandas_Practise.Grouping",
        "peekOfCode": "df = pd.DataFrame(data)\n\"\"\" Display the DataFrame\"\"\"\nprint(\"Original DataFrame:\\n\", df)\n\"\"\" Group by 'team' and calculate the sum of 'points'\"\"\"\ngrouped_sum = df.groupby('team').sum()\nprint(\"\\nGrouped by Team and summed:\\n\", grouped_sum)\n\"\"\" Group by 'Team' and 'Player' and calculate the sum of 'Points'\"\"\"\ngrouped_multi = df.groupby(['team', 'player']).sum()\nprint(\"\\nGrouped by Team and Player and summed:\\n\", grouped_multi)\n\"\"\" Group by 'Team' and calculate various aggregations\"\"\"",
        "detail": "Pandas_Practise.Grouping",
        "documentation": {}
    },
    {
        "label": "grouped_sum",
        "kind": 5,
        "importPath": "Pandas_Practise.Grouping",
        "description": "Pandas_Practise.Grouping",
        "peekOfCode": "grouped_sum = df.groupby('team').sum()\nprint(\"\\nGrouped by Team and summed:\\n\", grouped_sum)\n\"\"\" Group by 'Team' and 'Player' and calculate the sum of 'Points'\"\"\"\ngrouped_multi = df.groupby(['team', 'player']).sum()\nprint(\"\\nGrouped by Team and Player and summed:\\n\", grouped_multi)\n\"\"\" Group by 'Team' and calculate various aggregations\"\"\"\ngrouped_agg = df.groupby('team').agg({\n    'points': ['sum', 'mean', 'max']\n})\nprint(\"\\nGrouped by Team with multiple aggregations:\\n\", grouped_agg)",
        "detail": "Pandas_Practise.Grouping",
        "documentation": {}
    },
    {
        "label": "grouped_multi",
        "kind": 5,
        "importPath": "Pandas_Practise.Grouping",
        "description": "Pandas_Practise.Grouping",
        "peekOfCode": "grouped_multi = df.groupby(['team', 'player']).sum()\nprint(\"\\nGrouped by Team and Player and summed:\\n\", grouped_multi)\n\"\"\" Group by 'Team' and calculate various aggregations\"\"\"\ngrouped_agg = df.groupby('team').agg({\n    'points': ['sum', 'mean', 'max']\n})\nprint(\"\\nGrouped by Team with multiple aggregations:\\n\", grouped_agg)\n\"\"\" Calculate the mean Points by Team and assign it to each row \"\"\"\ndf['meanpoints'] = df.groupby('team')['points'].transform('mean')\nprint(\"\\nMean Points by Team assigned to each row:\\n\", df)",
        "detail": "Pandas_Practise.Grouping",
        "documentation": {}
    },
    {
        "label": "grouped_agg",
        "kind": 5,
        "importPath": "Pandas_Practise.Grouping",
        "description": "Pandas_Practise.Grouping",
        "peekOfCode": "grouped_agg = df.groupby('team').agg({\n    'points': ['sum', 'mean', 'max']\n})\nprint(\"\\nGrouped by Team with multiple aggregations:\\n\", grouped_agg)\n\"\"\" Calculate the mean Points by Team and assign it to each row \"\"\"\ndf['meanpoints'] = df.groupby('team')['points'].transform('mean')\nprint(\"\\nMean Points by Team assigned to each row:\\n\", df)\n\"\"\" Iterate over groups \"\"\"\nfor name, group in df.groupby('team'):\n    print(f\"\\nGroup: {name}\")",
        "detail": "Pandas_Practise.Grouping",
        "documentation": {}
    },
    {
        "label": "df['meanpoints']",
        "kind": 5,
        "importPath": "Pandas_Practise.Grouping",
        "description": "Pandas_Practise.Grouping",
        "peekOfCode": "df['meanpoints'] = df.groupby('team')['points'].transform('mean')\nprint(\"\\nMean Points by Team assigned to each row:\\n\", df)\n\"\"\" Iterate over groups \"\"\"\nfor name, group in df.groupby('team'):\n    print(f\"\\nGroup: {name}\")\n    print(group)",
        "detail": "Pandas_Practise.Grouping",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Pandas_Practise.intro",
        "description": "Pandas_Practise.intro",
        "peekOfCode": "a = pd.Series([10, 20, 30, 40, 50])\nb = pd.Series([10, 20, 30, 40, 50],index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nc = pd.Series({\"a\":1,\"b\":2,\"c\":3 })\nd = pd.Series(5.0,index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nprint(d)\nprint(d.dtype)  # float64\nprint(d.index)  # Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\nprint(d.values) # [5. 5. 5. 5. 5.]\nprint(d.keys)   # same as \"d\"\nprint(\"GET valueS : \",b.get(\"a\"))",
        "detail": "Pandas_Practise.intro",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Pandas_Practise.intro",
        "description": "Pandas_Practise.intro",
        "peekOfCode": "b = pd.Series([10, 20, 30, 40, 50],index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nc = pd.Series({\"a\":1,\"b\":2,\"c\":3 })\nd = pd.Series(5.0,index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nprint(d)\nprint(d.dtype)  # float64\nprint(d.index)  # Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\nprint(d.values) # [5. 5. 5. 5. 5.]\nprint(d.keys)   # same as \"d\"\nprint(\"GET valueS : \",b.get(\"a\"))",
        "detail": "Pandas_Practise.intro",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Pandas_Practise.intro",
        "description": "Pandas_Practise.intro",
        "peekOfCode": "c = pd.Series({\"a\":1,\"b\":2,\"c\":3 })\nd = pd.Series(5.0,index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nprint(d)\nprint(d.dtype)  # float64\nprint(d.index)  # Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\nprint(d.values) # [5. 5. 5. 5. 5.]\nprint(d.keys)   # same as \"d\"\nprint(\"GET valueS : \",b.get(\"a\"))",
        "detail": "Pandas_Practise.intro",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Pandas_Practise.intro",
        "description": "Pandas_Practise.intro",
        "peekOfCode": "d = pd.Series(5.0,index=[\"a\",\"a\",\"c\",\"d\",\"e\"])\nprint(d)\nprint(d.dtype)  # float64\nprint(d.index)  # Index(['a', 'b', 'c', 'd', 'e'], dtype='object')\nprint(d.values) # [5. 5. 5. 5. 5.]\nprint(d.keys)   # same as \"d\"\nprint(\"GET valueS : \",b.get(\"a\"))",
        "detail": "Pandas_Practise.intro",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.intro_dataframe",
        "description": "Pandas_Practise.intro_dataframe",
        "peekOfCode": "data = {'Name': ['Aakash', 'Shivam', 'Rudra', 'Sona'],\n        'Age': [24, 23, 22, 23],\n        'City': ['Noida', 'Delhi', 'Mumbai', 'Pune']}\n# Create a DataFrame\ndf = pd.DataFrame(data)\ndf = pd.DataFrame(data, index=[i for i in range(1, 5)])\n# print(df)\n# print(\"Index of df are :\\n\",df.index)\n# print(\"names of df are :\\n\",df.Name)\n# print(\"city of df are :\\n\",df.City.get(1))  \"\"\"get() take the index value \"\"\"",
        "detail": "Pandas_Practise.intro_dataframe",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.intro_dataframe",
        "description": "Pandas_Practise.intro_dataframe",
        "peekOfCode": "df = pd.DataFrame(data)\ndf = pd.DataFrame(data, index=[i for i in range(1, 5)])\n# print(df)\n# print(\"Index of df are :\\n\",df.index)\n# print(\"names of df are :\\n\",df.Name)\n# print(\"city of df are :\\n\",df.City.get(1))  \"\"\"get() take the index value \"\"\"\nprint(\"\\nage of df are :\\n\", df.Age)\nprint(\"\\nage[ using get('Age') ] of df are :\\n\", df.get(\"Age\"))\nprint(\"\\nage[ using get(index-key) ] of df are :\\n\", df.Age.get(1))",
        "detail": "Pandas_Practise.intro_dataframe",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.intro_dataframe",
        "description": "Pandas_Practise.intro_dataframe",
        "peekOfCode": "df = pd.DataFrame(data, index=[i for i in range(1, 5)])\n# print(df)\n# print(\"Index of df are :\\n\",df.index)\n# print(\"names of df are :\\n\",df.Name)\n# print(\"city of df are :\\n\",df.City.get(1))  \"\"\"get() take the index value \"\"\"\nprint(\"\\nage of df are :\\n\", df.Age)\nprint(\"\\nage[ using get('Age') ] of df are :\\n\", df.get(\"Age\"))\nprint(\"\\nage[ using get(index-key) ] of df are :\\n\", df.Age.get(1))",
        "detail": "Pandas_Practise.intro_dataframe",
        "documentation": {}
    },
    {
        "label": "to_uppercase",
        "kind": 2,
        "importPath": "Pandas_Practise.Map",
        "description": "Pandas_Practise.Map",
        "peekOfCode": "def to_uppercase(name):\n    return name.upper()\n# Apply the to_uppercase function to the 'name' column using map()\ndf['name'] = df['name'].map(to_uppercase)\n# Display the modified DataFrame\nprint(\"\\nDataFrame after applying map() to 'name' column:\")\nprint(df)",
        "detail": "Pandas_Practise.Map",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Map",
        "description": "Pandas_Practise.Map",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'age': [28, 24, 35, 32, 28, 24, np.nan, 32, 28, 24],\n}\ndf = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n# Function to convert names to uppercase\ndef to_uppercase(name):\n    return name.upper()",
        "detail": "Pandas_Practise.Map",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Map",
        "description": "Pandas_Practise.Map",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n# Function to convert names to uppercase\ndef to_uppercase(name):\n    return name.upper()\n# Apply the to_uppercase function to the 'name' column using map()\ndf['name'] = df['name'].map(to_uppercase)\n# Display the modified DataFrame\nprint(\"\\nDataFrame after applying map() to 'name' column:\")\nprint(df)",
        "detail": "Pandas_Practise.Map",
        "documentation": {}
    },
    {
        "label": "df['name']",
        "kind": 5,
        "importPath": "Pandas_Practise.Map",
        "description": "Pandas_Practise.Map",
        "peekOfCode": "df['name'] = df['name'].map(to_uppercase)\n# Display the modified DataFrame\nprint(\"\\nDataFrame after applying map() to 'name' column:\")\nprint(df)",
        "detail": "Pandas_Practise.Map",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Missing_Data",
        "description": "Pandas_Practise.Missing_Data",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Pandas_Practise.Missing_Data",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Missing_Data",
        "description": "Pandas_Practise.Missing_Data",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\"Boolean Mask where values are nan\"\"\"\n#print(df.isna())\n#print(df.isna().sum())\n\"\"\" Fill some Value in Missing Data \"\"\"\n#print(df.fillna(value=123))\n\"\"\" Drop missing data \"\"\"\n#print(df.dropna())\n\"\"\" Backward Filling \"\"\"",
        "detail": "Pandas_Practise.Missing_Data",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Pivot_Table",
        "description": "Pandas_Practise.Pivot_Table",
        "peekOfCode": "data = {\n    'Date': ['2024-01-01', '2024-01-01', '2024-01-02', '2024-01-02'],\n    'City': ['Bokaro', 'Ranchi', 'Dhanbad', 'Dumka'],\n    'Sales': [200, 150, 300, 200],\n    'Expenses': [50, 60, 70, 80]\n}\ndf = pd.DataFrame(data)\nprint(\"Original DataFrame:\\n\", df)\n# Basic Pivot Table\npivot = pd.pivot_table(df, values='Sales', index='Date',",
        "detail": "Pandas_Practise.Pivot_Table",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Pivot_Table",
        "description": "Pandas_Practise.Pivot_Table",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Original DataFrame:\\n\", df)\n# Basic Pivot Table\npivot = pd.pivot_table(df, values='Sales', index='Date',\n                       columns='City', aggfunc='sum')\nprint(\"\\nPivot Table:\\n\", pivot)\n# Multiple Aggregation Functions\npivot_multi = pd.pivot_table(df, values=['Sales', 'Expenses'], index='Date', columns='City',\n                             aggfunc={'Sales': 'sum', 'Expenses': 'mean'})\nprint(\"\\nPivot Table with Multiple Aggregations:\\n\", pivot_multi)",
        "detail": "Pandas_Practise.Pivot_Table",
        "documentation": {}
    },
    {
        "label": "pivot",
        "kind": 5,
        "importPath": "Pandas_Practise.Pivot_Table",
        "description": "Pandas_Practise.Pivot_Table",
        "peekOfCode": "pivot = pd.pivot_table(df, values='Sales', index='Date',\n                       columns='City', aggfunc='sum')\nprint(\"\\nPivot Table:\\n\", pivot)\n# Multiple Aggregation Functions\npivot_multi = pd.pivot_table(df, values=['Sales', 'Expenses'], index='Date', columns='City',\n                             aggfunc={'Sales': 'sum', 'Expenses': 'mean'})\nprint(\"\\nPivot Table with Multiple Aggregations:\\n\", pivot_multi)\n# Adding Margins (Subtotals)\npivot_margins = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                               aggfunc='sum', margins=True)",
        "detail": "Pandas_Practise.Pivot_Table",
        "documentation": {}
    },
    {
        "label": "pivot_multi",
        "kind": 5,
        "importPath": "Pandas_Practise.Pivot_Table",
        "description": "Pandas_Practise.Pivot_Table",
        "peekOfCode": "pivot_multi = pd.pivot_table(df, values=['Sales', 'Expenses'], index='Date', columns='City',\n                             aggfunc={'Sales': 'sum', 'Expenses': 'mean'})\nprint(\"\\nPivot Table with Multiple Aggregations:\\n\", pivot_multi)\n# Adding Margins (Subtotals)\npivot_margins = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                               aggfunc='sum', margins=True)\nprint(\"\\nPivot Table with Margins:\\n\", pivot_margins)\n# Filling Missing Values\npivot_fill = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                            aggfunc='sum', fill_value=0)",
        "detail": "Pandas_Practise.Pivot_Table",
        "documentation": {}
    },
    {
        "label": "pivot_margins",
        "kind": 5,
        "importPath": "Pandas_Practise.Pivot_Table",
        "description": "Pandas_Practise.Pivot_Table",
        "peekOfCode": "pivot_margins = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                               aggfunc='sum', margins=True)\nprint(\"\\nPivot Table with Margins:\\n\", pivot_margins)\n# Filling Missing Values\npivot_fill = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                            aggfunc='sum', fill_value=0)\nprint(\"\\nPivot Table with Fill Value:\\n\", pivot_fill)",
        "detail": "Pandas_Practise.Pivot_Table",
        "documentation": {}
    },
    {
        "label": "pivot_fill",
        "kind": 5,
        "importPath": "Pandas_Practise.Pivot_Table",
        "description": "Pandas_Practise.Pivot_Table",
        "peekOfCode": "pivot_fill = pd.pivot_table(df, values='Sales', index='Date', columns='City',\n                            aggfunc='sum', fill_value=0)\nprint(\"\\nPivot Table with Fill Value:\\n\", pivot_fill)",
        "detail": "Pandas_Practise.Pivot_Table",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.series_ka_DF",
        "description": "Pandas_Practise.series_ka_DF",
        "peekOfCode": "data = {\n    \"Department\": [\"IT\", \"Finance\", \"IT\"],\n    \"Job Title\": [\"Software Engineer\", \"Senior Software Engineer\", \"Project Manager\"],\n    \"Salary\": pd.Series([50000, 60000]),\n    \"Room No.\": pd.Series([i for i in range(20, 26, 2)]),\n}\ndf = pd.DataFrame(data)\n# print(df)\n\"\"\"index ki value match hona chachie\"\"\"\ndata2 = {",
        "detail": "Pandas_Practise.series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.series_ka_DF",
        "description": "Pandas_Practise.series_ka_DF",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(df)\n\"\"\"index ki value match hona chachie\"\"\"\ndata2 = {\n    \"Salary\": pd.Series([40000, 50000], index=[\"aa\", \"bb\"]),\n    \"Room No.\": pd.Series([i for i in range(15, 19)], index=[\"aa\", \"bb\", \"cc\", \"dd\"]),\n}\ndf2 = pd.DataFrame(data2, index=[i for i in range(1, 4)])\ndf2 = pd.DataFrame(data2)\ndf2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])",
        "detail": "Pandas_Practise.series_ka_DF",
        "documentation": {}
    },
    {
        "label": "data2",
        "kind": 5,
        "importPath": "Pandas_Practise.series_ka_DF",
        "description": "Pandas_Practise.series_ka_DF",
        "peekOfCode": "data2 = {\n    \"Salary\": pd.Series([40000, 50000], index=[\"aa\", \"bb\"]),\n    \"Room No.\": pd.Series([i for i in range(15, 19)], index=[\"aa\", \"bb\", \"cc\", \"dd\"]),\n}\ndf2 = pd.DataFrame(data2, index=[i for i in range(1, 4)])\ndf2 = pd.DataFrame(data2)\ndf2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])\n# print(df2)\ndata3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},",
        "detail": "Pandas_Practise.series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "Pandas_Practise.series_ka_DF",
        "description": "Pandas_Practise.series_ka_DF",
        "peekOfCode": "df2 = pd.DataFrame(data2, index=[i for i in range(1, 4)])\ndf2 = pd.DataFrame(data2)\ndf2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])\n# print(df2)\ndata3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},\n    {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40},\n]\ndf3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "Pandas_Practise.series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "Pandas_Practise.series_ka_DF",
        "description": "Pandas_Practise.series_ka_DF",
        "peekOfCode": "df2 = pd.DataFrame(data2)\ndf2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])\n# print(df2)\ndata3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},\n    {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40},\n]\ndf3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "Pandas_Practise.series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "Pandas_Practise.series_ka_DF",
        "description": "Pandas_Practise.series_ka_DF",
        "peekOfCode": "df2 = pd.DataFrame(data2, index=[\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"])\n# print(df2)\ndata3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},\n    {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40},\n]\ndf3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "Pandas_Practise.series_ka_DF",
        "documentation": {}
    },
    {
        "label": "data3",
        "kind": 5,
        "importPath": "Pandas_Practise.series_ka_DF",
        "description": "Pandas_Practise.series_ka_DF",
        "peekOfCode": "data3 = [\n    {\"a\": 1, \"b\": 2,\"c\": 3},\n    {\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40},\n]\ndf3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "Pandas_Practise.series_ka_DF",
        "documentation": {}
    },
    {
        "label": "df3",
        "kind": 5,
        "importPath": "Pandas_Practise.series_ka_DF",
        "description": "Pandas_Practise.series_ka_DF",
        "peekOfCode": "df3 = pd.DataFrame(data3)\nprint(df3)",
        "detail": "Pandas_Practise.series_ka_DF",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Stats_Pandas",
        "description": "Pandas_Practise.Stats_Pandas",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Pandas_Practise.Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Stats_Pandas",
        "description": "Pandas_Practise.Stats_Pandas",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\" Calculate the mean of the 'age' column\"\"\"\n#age_mean = df['age'].mean()\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Calculate the mean of the 'age' column including NaN values\"\"\"\n#age_mean_with_nan = df['age'].mean(skipna=False)\n#print(\"\\nMean age including NaN:\", age_mean_with_nan)\n\"\"\" Calculate the mean of 'age' and 'marks' columns\"\"\"\n#selected_means = df[['age', 'marks']].mean()",
        "detail": "Pandas_Practise.Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#age_mean",
        "kind": 5,
        "importPath": "Pandas_Practise.Stats_Pandas",
        "description": "Pandas_Practise.Stats_Pandas",
        "peekOfCode": "#age_mean = df['age'].mean()\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Calculate the mean of the 'age' column including NaN values\"\"\"\n#age_mean_with_nan = df['age'].mean(skipna=False)\n#print(\"\\nMean age including NaN:\", age_mean_with_nan)\n\"\"\" Calculate the mean of 'age' and 'marks' columns\"\"\"\n#selected_means = df[['age', 'marks']].mean()\n#print(\"\\nAge and Marks Mean:\\n\", selected_means)\n\"\"\" Apply a single aggregation function\"\"\"\n#age_mean = df['age'].agg('mean')",
        "detail": "Pandas_Practise.Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#age_mean_with_nan",
        "kind": 5,
        "importPath": "Pandas_Practise.Stats_Pandas",
        "description": "Pandas_Practise.Stats_Pandas",
        "peekOfCode": "#age_mean_with_nan = df['age'].mean(skipna=False)\n#print(\"\\nMean age including NaN:\", age_mean_with_nan)\n\"\"\" Calculate the mean of 'age' and 'marks' columns\"\"\"\n#selected_means = df[['age', 'marks']].mean()\n#print(\"\\nAge and Marks Mean:\\n\", selected_means)\n\"\"\" Apply a single aggregation function\"\"\"\n#age_mean = df['age'].agg('mean')\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Apply multiple aggregation functions\"\"\"\n#age_stats = df['age'].agg(['mean', 'min', 'max'])",
        "detail": "Pandas_Practise.Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#selected_means",
        "kind": 5,
        "importPath": "Pandas_Practise.Stats_Pandas",
        "description": "Pandas_Practise.Stats_Pandas",
        "peekOfCode": "#selected_means = df[['age', 'marks']].mean()\n#print(\"\\nAge and Marks Mean:\\n\", selected_means)\n\"\"\" Apply a single aggregation function\"\"\"\n#age_mean = df['age'].agg('mean')\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Apply multiple aggregation functions\"\"\"\n#age_stats = df['age'].agg(['mean', 'min', 'max'])\n#print(\"\\nAge statistics:\\n\", age_stats)\n\"\"\" Apply different aggregation functions to different columns\"\"\"\ncustom_agg = df.agg({",
        "detail": "Pandas_Practise.Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#age_mean",
        "kind": 5,
        "importPath": "Pandas_Practise.Stats_Pandas",
        "description": "Pandas_Practise.Stats_Pandas",
        "peekOfCode": "#age_mean = df['age'].agg('mean')\n#print(\"\\nMean age:\", age_mean)\n\"\"\" Apply multiple aggregation functions\"\"\"\n#age_stats = df['age'].agg(['mean', 'min', 'max'])\n#print(\"\\nAge statistics:\\n\", age_stats)\n\"\"\" Apply different aggregation functions to different columns\"\"\"\ncustom_agg = df.agg({\n    'age': ['mean', 'min', 'max'],\n    'marks': 'sum',\n    'roll': 'count'",
        "detail": "Pandas_Practise.Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "#age_stats",
        "kind": 5,
        "importPath": "Pandas_Practise.Stats_Pandas",
        "description": "Pandas_Practise.Stats_Pandas",
        "peekOfCode": "#age_stats = df['age'].agg(['mean', 'min', 'max'])\n#print(\"\\nAge statistics:\\n\", age_stats)\n\"\"\" Apply different aggregation functions to different columns\"\"\"\ncustom_agg = df.agg({\n    'age': ['mean', 'min', 'max'],\n    'marks': 'sum',\n    'roll': 'count'\n})\nprint(\"\\nCustom aggregation:\\n\", custom_agg)",
        "detail": "Pandas_Practise.Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "custom_agg",
        "kind": 5,
        "importPath": "Pandas_Practise.Stats_Pandas",
        "description": "Pandas_Practise.Stats_Pandas",
        "peekOfCode": "custom_agg = df.agg({\n    'age': ['mean', 'min', 'max'],\n    'marks': 'sum',\n    'roll': 'count'\n})\nprint(\"\\nCustom aggregation:\\n\", custom_agg)",
        "detail": "Pandas_Practise.Stats_Pandas",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.String_Method_Pandas",
        "description": "Pandas_Practise.String_Method_Pandas",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n\"\"\"Convert to lowercase\"\"\"\n#print(\"\\nLowercase cities:\\n\", df['city'].str.lower())\n\"\"\"Convert to Uppercase\"\"\"",
        "detail": "Pandas_Practise.String_Method_Pandas",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.String_Method_Pandas",
        "description": "Pandas_Practise.String_Method_Pandas",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n\"\"\"Convert to lowercase\"\"\"\n#print(\"\\nLowercase cities:\\n\", df['city'].str.lower())\n\"\"\"Convert to Uppercase\"\"\"\n#print(\"\\nUppercase cities:\\n\", df['city'].str.upper())\n\"\"\"Length of String\"\"\"\n#print(\"\\nString Length cities:\\n\", df['city'].str.len())\n\"\"\"Extract first three characters\"\"\"\n#print(\"\\nCity substrings (first 3 characters):\\n\", df['city'].str[:3])",
        "detail": "Pandas_Practise.String_Method_Pandas",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Transformation",
        "description": "Pandas_Practise.Transformation",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)",
        "detail": "Pandas_Practise.Transformation",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Transformation",
        "description": "Pandas_Practise.Transformation",
        "peekOfCode": "df = pd.DataFrame(data)\n# print(\"Display All Data:\\n\", df)\n\"\"\" Apply a single transformation function \"\"\"\n#age_plus_one = df['age'].transform(lambda x: x + 1)\n#print(\"\\nAge plus one:\\n\", age_plus_one)\n\"\"\" Apply a built-in transformation function to a Series \"\"\"\n#age_squared = df['age'].transform(np.sqrt)\n#print(\"\\nAge squared:\\n\", age_squared)\n\"\"\" Apply a single transformation function to multiple columns \"\"\"\n#df_transformed = df[['age', 'marks']].transform(lambda x: x * 2)",
        "detail": "Pandas_Practise.Transformation",
        "documentation": {}
    },
    {
        "label": "#age_plus_one",
        "kind": 5,
        "importPath": "Pandas_Practise.Transformation",
        "description": "Pandas_Practise.Transformation",
        "peekOfCode": "#age_plus_one = df['age'].transform(lambda x: x + 1)\n#print(\"\\nAge plus one:\\n\", age_plus_one)\n\"\"\" Apply a built-in transformation function to a Series \"\"\"\n#age_squared = df['age'].transform(np.sqrt)\n#print(\"\\nAge squared:\\n\", age_squared)\n\"\"\" Apply a single transformation function to multiple columns \"\"\"\n#df_transformed = df[['age', 'marks']].transform(lambda x: x * 2)\n#print(\"\\nDataFrame transformed (age and marks doubled):\\n\", df_transformed)\n\"\"\" Apply different transformation functions to different columns \"\"\"\ndf_transformed_diff = df.transform({",
        "detail": "Pandas_Practise.Transformation",
        "documentation": {}
    },
    {
        "label": "#age_squared",
        "kind": 5,
        "importPath": "Pandas_Practise.Transformation",
        "description": "Pandas_Practise.Transformation",
        "peekOfCode": "#age_squared = df['age'].transform(np.sqrt)\n#print(\"\\nAge squared:\\n\", age_squared)\n\"\"\" Apply a single transformation function to multiple columns \"\"\"\n#df_transformed = df[['age', 'marks']].transform(lambda x: x * 2)\n#print(\"\\nDataFrame transformed (age and marks doubled):\\n\", df_transformed)\n\"\"\" Apply different transformation functions to different columns \"\"\"\ndf_transformed_diff = df.transform({\n    'age': lambda x: x + 10,\n    'marks': lambda x: x - 10\n})",
        "detail": "Pandas_Practise.Transformation",
        "documentation": {}
    },
    {
        "label": "#df_transformed",
        "kind": 5,
        "importPath": "Pandas_Practise.Transformation",
        "description": "Pandas_Practise.Transformation",
        "peekOfCode": "#df_transformed = df[['age', 'marks']].transform(lambda x: x * 2)\n#print(\"\\nDataFrame transformed (age and marks doubled):\\n\", df_transformed)\n\"\"\" Apply different transformation functions to different columns \"\"\"\ndf_transformed_diff = df.transform({\n    'age': lambda x: x + 10,\n    'marks': lambda x: x - 10\n})\nprint(\"\\nDataFrame transformed with different functions:\\n\", df_transformed_diff)",
        "detail": "Pandas_Practise.Transformation",
        "documentation": {}
    },
    {
        "label": "df_transformed_diff",
        "kind": 5,
        "importPath": "Pandas_Practise.Transformation",
        "description": "Pandas_Practise.Transformation",
        "peekOfCode": "df_transformed_diff = df.transform({\n    'age': lambda x: x + 10,\n    'marks': lambda x: x - 10\n})\nprint(\"\\nDataFrame transformed with different functions:\\n\", df_transformed_diff)",
        "detail": "Pandas_Practise.Transformation",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Practise.Value_Counts",
        "description": "Pandas_Practise.Value_Counts",
        "peekOfCode": "data = {\n    'name': ['aj', 'shivam', 'mohit', 'mohit'],\n    'age': [28, 24, 35, 32],\n    'roll': [102, 102, 103, 104],\n    'marks':[11, 22, 33, 44],\n    'city':['Madhubani', 'Madhubani', 'Mithila', 'Noida'],\n    'gender':['F', 'M', 'M', 'F']\n}\ndf = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)",
        "detail": "Pandas_Practise.Value_Counts",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Practise.Value_Counts",
        "description": "Pandas_Practise.Value_Counts",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Display All Data:\\n\", df)\n\"\"\"Use value_counts to count unique values in the 'city' column\"\"\"\ncity_counts = df['city'].value_counts()\nprint(\"\\nCity counts:\\n\", city_counts)\n\"\"\"Use value_counts to count unique values in the 'name' column\"\"\"\nname_counts = df['name'].value_counts()\nprint(\"\\nName counts:\\n\", name_counts)\n\"\"\"Use value_counts to count unique values in the 'age' column including NaN values\"\"\"\nage_counts = df['age'].value_counts(dropna=False)",
        "detail": "Pandas_Practise.Value_Counts",
        "documentation": {}
    },
    {
        "label": "city_counts",
        "kind": 5,
        "importPath": "Pandas_Practise.Value_Counts",
        "description": "Pandas_Practise.Value_Counts",
        "peekOfCode": "city_counts = df['city'].value_counts()\nprint(\"\\nCity counts:\\n\", city_counts)\n\"\"\"Use value_counts to count unique values in the 'name' column\"\"\"\nname_counts = df['name'].value_counts()\nprint(\"\\nName counts:\\n\", name_counts)\n\"\"\"Use value_counts to count unique values in the 'age' column including NaN values\"\"\"\nage_counts = df['age'].value_counts(dropna=False)\nprint(\"\\nAge counts including NaN:\\n\", age_counts)\n\"\"\"Use value_counts with sorting by index\"\"\"\ncity_counts_sorted = df['city'].value_counts().sort_index()",
        "detail": "Pandas_Practise.Value_Counts",
        "documentation": {}
    },
    {
        "label": "name_counts",
        "kind": 5,
        "importPath": "Pandas_Practise.Value_Counts",
        "description": "Pandas_Practise.Value_Counts",
        "peekOfCode": "name_counts = df['name'].value_counts()\nprint(\"\\nName counts:\\n\", name_counts)\n\"\"\"Use value_counts to count unique values in the 'age' column including NaN values\"\"\"\nage_counts = df['age'].value_counts(dropna=False)\nprint(\"\\nAge counts including NaN:\\n\", age_counts)\n\"\"\"Use value_counts with sorting by index\"\"\"\ncity_counts_sorted = df['city'].value_counts().sort_index()\nprint(\"\\nCity counts sorted by index:\\n\", city_counts_sorted)",
        "detail": "Pandas_Practise.Value_Counts",
        "documentation": {}
    },
    {
        "label": "age_counts",
        "kind": 5,
        "importPath": "Pandas_Practise.Value_Counts",
        "description": "Pandas_Practise.Value_Counts",
        "peekOfCode": "age_counts = df['age'].value_counts(dropna=False)\nprint(\"\\nAge counts including NaN:\\n\", age_counts)\n\"\"\"Use value_counts with sorting by index\"\"\"\ncity_counts_sorted = df['city'].value_counts().sort_index()\nprint(\"\\nCity counts sorted by index:\\n\", city_counts_sorted)",
        "detail": "Pandas_Practise.Value_Counts",
        "documentation": {}
    },
    {
        "label": "city_counts_sorted",
        "kind": 5,
        "importPath": "Pandas_Practise.Value_Counts",
        "description": "Pandas_Practise.Value_Counts",
        "peekOfCode": "city_counts_sorted = df['city'].value_counts().sort_index()\nprint(\"\\nCity counts sorted by index:\\n\", city_counts_sorted)",
        "detail": "Pandas_Practise.Value_Counts",
        "documentation": {}
    },
    {
        "label": "plot_branch_data",
        "kind": 2,
        "importPath": "Pandas_Visualization.Kundan_Sir.attendance",
        "description": "Pandas_Visualization.Kundan_Sir.attendance",
        "peekOfCode": "def plot_branch_data(branch, present, absent):\n    total = present + absent\n    # Plotting\n    plt.bar(['Present', 'Absent'], [present, absent], color=['skyblue', 'salmon'])\n    plt.title(f'Student Attendance in {branch}')\n    plt.xlabel('Status')\n    plt.ylabel('Number of Students')\n    # Annotate bars with exact numbers\n    plt.text(0, present, str(present), ha='center', va='bottom')\n    plt.text(1, absent, str(absent), ha='center', va='bottom')",
        "detail": "Pandas_Visualization.Kundan_Sir.attendance",
        "documentation": {}
    },
    {
        "label": "branches",
        "kind": 5,
        "importPath": "Pandas_Visualization.Kundan_Sir.attendance",
        "description": "Pandas_Visualization.Kundan_Sir.attendance",
        "peekOfCode": "branches = input(\"Enter the names of branches/Section separated by commas (CSE, DS, AI, IOT, Others): \").split(',')\n# Dictionary to store branch data\nbranch_data = {}\n# Get input for each branch\nfor branch in branches:\n    print(f\"Enter data for branch: {branch}\")\n    present_students = int(input(\"Number of students present: \"))\n    absent_students = int(input(\"Number of students absent: \"))\n    total_students = present_students + absent_students\n    branch_data[branch] = {'Total': total_students, 'Present': present_students, 'Absent': absent_students}",
        "detail": "Pandas_Visualization.Kundan_Sir.attendance",
        "documentation": {}
    },
    {
        "label": "branch_data",
        "kind": 5,
        "importPath": "Pandas_Visualization.Kundan_Sir.attendance",
        "description": "Pandas_Visualization.Kundan_Sir.attendance",
        "peekOfCode": "branch_data = {}\n# Get input for each branch\nfor branch in branches:\n    print(f\"Enter data for branch: {branch}\")\n    present_students = int(input(\"Number of students present: \"))\n    absent_students = int(input(\"Number of students absent: \"))\n    total_students = present_students + absent_students\n    branch_data[branch] = {'Total': total_students, 'Present': present_students, 'Absent': absent_students}\n# Plotting\nnum_branches = len(branches)",
        "detail": "Pandas_Visualization.Kundan_Sir.attendance",
        "documentation": {}
    },
    {
        "label": "num_branches",
        "kind": 5,
        "importPath": "Pandas_Visualization.Kundan_Sir.attendance",
        "description": "Pandas_Visualization.Kundan_Sir.attendance",
        "peekOfCode": "num_branches = len(branches)\nnum_rows = math.ceil(num_branches / 3)  # Maximum 3 columns\nplt.figure(figsize=(12, 4 * num_rows))\nfor i, (branch, data) in enumerate(branch_data.items(), 1):\n    plt.subplot(num_rows, min(3, num_branches), i)\n    plot_branch_data(branch, data['Present'], data['Absent'])\n# Mark the creator at the bottom-right corner of the page\nplt.text(2, -10 * num_rows, '-------Made by Kundan Singh Rautela', ha='right', va='bottom', color='black', fontsize=10)\n# Adjust layout and display\nplt.tight_layout()",
        "detail": "Pandas_Visualization.Kundan_Sir.attendance",
        "documentation": {}
    },
    {
        "label": "num_rows",
        "kind": 5,
        "importPath": "Pandas_Visualization.Kundan_Sir.attendance",
        "description": "Pandas_Visualization.Kundan_Sir.attendance",
        "peekOfCode": "num_rows = math.ceil(num_branches / 3)  # Maximum 3 columns\nplt.figure(figsize=(12, 4 * num_rows))\nfor i, (branch, data) in enumerate(branch_data.items(), 1):\n    plt.subplot(num_rows, min(3, num_branches), i)\n    plot_branch_data(branch, data['Present'], data['Absent'])\n# Mark the creator at the bottom-right corner of the page\nplt.text(2, -10 * num_rows, '-------Made by Kundan Singh Rautela', ha='right', va='bottom', color='black', fontsize=10)\n# Adjust layout and display\nplt.tight_layout()\nplt.show()",
        "detail": "Pandas_Visualization.Kundan_Sir.attendance",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Pandas_Visualization.first",
        "description": "Pandas_Visualization.first",
        "peekOfCode": "data = {'x': range(10), 'y': [i**2 for i in range(10)]}\ndf = pd.DataFrame(data)\n# Plot a line graph\ndf.plot(x='x', y='y', kind='line')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Line Plot')\nplt.show()",
        "detail": "Pandas_Visualization.first",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Pandas_Visualization.first",
        "description": "Pandas_Visualization.first",
        "peekOfCode": "df = pd.DataFrame(data)\n# Plot a line graph\ndf.plot(x='x', y='y', kind='line')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Line Plot')\nplt.show()",
        "detail": "Pandas_Visualization.first",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "speacial problems.py.recursion_fact",
        "description": "speacial problems.py.recursion_fact",
        "peekOfCode": "def factorial():\n    n = int(input(\"Enter the the no. ,to find its factorial : \"))\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    print(f\"The factorial of {n} is {fact}\")\ndef recursion_fact():\n    n = int(input(\"Enter the the no. ,to find its factorial : \"))\n    def fact(n):\n        if n < 0:",
        "detail": "speacial problems.py.recursion_fact",
        "documentation": {}
    },
    {
        "label": "recursion_fact",
        "kind": 2,
        "importPath": "speacial problems.py.recursion_fact",
        "description": "speacial problems.py.recursion_fact",
        "peekOfCode": "def recursion_fact():\n    n = int(input(\"Enter the the no. ,to find its factorial : \"))\n    def fact(n):\n        if n < 0:\n            print(\"Please enter a postive number !\")\n            recursion_fact()\n        elif n == 0 or n == 1:\n            return 1\n        else:\n            return n*fact(n-1)",
        "detail": "speacial problems.py.recursion_fact",
        "documentation": {}
    },
    {
        "label": "recursion_fibo",
        "kind": 2,
        "importPath": "speacial problems.py.recursion_fibo",
        "description": "speacial problems.py.recursion_fibo",
        "peekOfCode": "def recursion_fibo():\n    n = int(input(\"Enter the no. of terms : \"))\n    def fibo(n):\n        if n <= 0:\n            print(\"Please enter a valid positive number !\")\n            recursion_fibo()\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]  # return to fibo(3) or result",
        "detail": "speacial problems.py.recursion_fibo",
        "documentation": {}
    },
    {
        "label": "without_recursion_fibo_for",
        "kind": 2,
        "importPath": "speacial problems.py.recursion_fibo",
        "description": "speacial problems.py.recursion_fibo",
        "peekOfCode": "def without_recursion_fibo_for():\n    n = int(input(\"Enter the no. of terms : \"))\n    if n <= 0:\n        print(\"Please enter a valid positive number !\")\n        without_recursion_fibo_for()\n    if n == 1:\n        print([0])\n    else:\n        f = [0, 1]\n        for i in range(2, n):",
        "detail": "speacial problems.py.recursion_fibo",
        "documentation": {}
    },
    {
        "label": "without_recursion_fibo_while",
        "kind": 2,
        "importPath": "speacial problems.py.recursion_fibo",
        "description": "speacial problems.py.recursion_fibo",
        "peekOfCode": "def without_recursion_fibo_while():\n    n = int(input(\"Enter the no. of terms : \"))\n    if n <= 0:\n        print(\"Please enter a valid positive number !\")\n        without_recursion_fibo_while()\n    if n == 1:\n        print([0])\n    else:\n        f = [0, 1]\n        while len(f) < n:",
        "detail": "speacial problems.py.recursion_fibo",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except OSError:\n                pass\n        tee_f.write(what)",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_root_hkey",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU\n        return winreg.HKEY_CURRENT_USER",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "create_shortcut",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def create_shortcut(\n    path, description, filename, arguments=\"\", workdir=\"\", iconpath=\"\", iconindex=0\n):\n    import pythoncom\n    from win32com.shell import shell\n    ilink = pythoncom.CoCreateInstance(\n        shell.CLSID_ShellLink,\n        None,\n        pythoncom.CLSCTX_INPROC_SERVER,\n        shell.IID_IShellLink,",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_special_folder_path",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_special_folder_path(path_name):\n    from win32com.shell import shell, shellcon\n    for maybe in \"\"\"\n        CSIDL_COMMON_STARTMENU CSIDL_STARTMENU CSIDL_COMMON_APPDATA\n        CSIDL_LOCAL_APPDATA CSIDL_APPDATA CSIDL_COMMON_DESKTOPDIRECTORY\n        CSIDL_DESKTOPDIRECTORY CSIDL_COMMON_STARTUP CSIDL_STARTUP\n        CSIDL_COMMON_PROGRAMS CSIDL_PROGRAMS CSIDL_PROGRAM_FILES_COMMON\n        CSIDL_PROGRAM_FILES CSIDL_FONTS\"\"\".split():\n        if maybe == path_name:\n            csidl = getattr(shellcon, maybe)",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info.major,\n        sys.version_info.minor,\n        suffix,",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(f\"-> {root_key_name}\\\\{key_name}[{value_name}]={value!r}\")\n        finally:",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(f\"-> DELETE {root_key_name}\\\\{key_name}[{value_name}]\")\n        finally:",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n    to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(f\"Failed to unregister COM objects: {why}\")\n    try:",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location: str) -> str:\n    location = os.path.abspath(location)\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError(\n            f'Path \"{location}\" is not an existing directory!'\n        )\n    return location\ndef main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python -m pywin32_postinstall -install\n    * or (shorter but you don't have control over which python environment is used)\n    > pywin32_postinstall -install\n    You need to execute this script, with a '-install' parameter,\n    to ensure the environment is setup correctly to install COM objects, services, etc.",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(\n    os.path.join(\n        tempfile.gettempdir(),  # Send output somewhere so it can be found if necessary...\n        \"pywin32_postinstall.log\",\n    ),\n    \"w\",\n)\nclass Tee:\n    def __init__(self, file):\n        self.f = file",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_postinstall",
        "description": "vir_aj.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ndef get_root_hkey():\n    try:\n        winreg.OpenKey(\n            winreg.HKEY_LOCAL_MACHINE, root_key_name, 0, winreg.KEY_CREATE_SUB_KEY\n        )\n        return winreg.HKEY_LOCAL_MACHINE\n    except OSError:\n        # Either not exist, or no permissions to create subkey means\n        # must be HKCU",
        "detail": "vir_aj.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_testall",
        "description": "vir_aj.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(f\"*** Test script '{script}' exited with {result.returncode}\")\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "vir_aj.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_testall",
        "description": "vir_aj.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "vir_aj.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "vir_aj.Scripts.pywin32_testall",
        "description": "vir_aj.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [project_root] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "vir_aj.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_testall",
        "description": "vir_aj.Scripts.pywin32_testall",
        "peekOfCode": "project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))\nsite_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras",
        "detail": "vir_aj.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_testall",
        "description": "vir_aj.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [site.getusersitepackages()] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)",
        "detail": "vir_aj.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "vir_aj.Scripts.pywin32_testall",
        "description": "vir_aj.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "vir_aj.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "extract_file",
        "kind": 2,
        "importPath": "vir_aj.Scripts.vba_extract",
        "description": "vir_aj.Scripts.vba_extract",
        "peekOfCode": "def extract_file(xlsm_zip, filename):\n    # Extract a single file from an Excel xlsm macro file.\n    data = xlsm_zip.read(\"xl/\" + filename)\n    # Write the data to a local file.\n    file = open(filename, \"wb\")\n    file.write(data)\n    file.close()\n# The VBA project file and project signature file we want to extract.\nvba_filename = \"vbaProject.bin\"\nvba_signature_filename = \"vbaProjectSignature.bin\"",
        "detail": "vir_aj.Scripts.vba_extract",
        "documentation": {}
    },
    {
        "label": "vba_filename",
        "kind": 5,
        "importPath": "vir_aj.Scripts.vba_extract",
        "description": "vir_aj.Scripts.vba_extract",
        "peekOfCode": "vba_filename = \"vbaProject.bin\"\nvba_signature_filename = \"vbaProjectSignature.bin\"\n# Get the xlsm file name from the commandline.\nif len(sys.argv) > 1:\n    xlsm_file = sys.argv[1]\nelse:\n    print(\n        \"\\nUtility to extract a vbaProject.bin binary from an Excel 2007+ \"\n        \"xlsm macro file for insertion into an XlsxWriter file.\\n\"\n        \"If the macros are digitally signed, extracts also a vbaProjectSignature.bin \"",
        "detail": "vir_aj.Scripts.vba_extract",
        "documentation": {}
    },
    {
        "label": "vba_signature_filename",
        "kind": 5,
        "importPath": "vir_aj.Scripts.vba_extract",
        "description": "vir_aj.Scripts.vba_extract",
        "peekOfCode": "vba_signature_filename = \"vbaProjectSignature.bin\"\n# Get the xlsm file name from the commandline.\nif len(sys.argv) > 1:\n    xlsm_file = sys.argv[1]\nelse:\n    print(\n        \"\\nUtility to extract a vbaProject.bin binary from an Excel 2007+ \"\n        \"xlsm macro file for insertion into an XlsxWriter file.\\n\"\n        \"If the macros are digitally signed, extracts also a vbaProjectSignature.bin \"\n        \"file.\\n\"",
        "detail": "vir_aj.Scripts.vba_extract",
        "documentation": {}
    },
    {
        "label": "merge_ppts",
        "kind": 2,
        "importPath": "del",
        "description": "del",
        "peekOfCode": "def merge_ppts(folder_path, output_ppt):\n    # Create a PowerPoint application object\n    powerpoint = comtypes.client.CreateObject(\"PowerPoint.Application\")\n    # Create a new presentation to store the merged slides\n    merged_ppt = powerpoint.Presentations.Add()\n    # Get a list of all PowerPoint files in the folder\n    ppt_files = [f for f in os.listdir(folder_path) if f.endswith('.pptx')]\n    for ppt_file in ppt_files:\n        try:\n            # Open each PowerPoint file in the folder",
        "detail": "del",
        "documentation": {}
    },
    {
        "label": "folder_path",
        "kind": 5,
        "importPath": "del",
        "description": "del",
        "peekOfCode": "folder_path = \"C:\\\\Users\\\\Aakash Jha\\\\OneDrive\\\\Desktop\\\\del_PPT\"\noutput_ppt = 'merged_ppt.pptx'\nmerge_ppts(folder_path, output_ppt)",
        "detail": "del",
        "documentation": {}
    },
    {
        "label": "output_ppt",
        "kind": 5,
        "importPath": "del",
        "description": "del",
        "peekOfCode": "output_ppt = 'merged_ppt.pptx'\nmerge_ppts(folder_path, output_ppt)",
        "detail": "del",
        "documentation": {}
    }
]